id,title,author_name,author_id,tags,no_of_imgs,file_path,link,img_links,article
138485.0,Converting Number to String in C++,,,"SaloniBansal1,shivanisinghss2110,surbhikumaridav,simmytarika5,23620uday2021,anshikajain26,harsh_shokeen,sayanc170,ksrikanth0498,abhishekcpp,kumardivesh",0.0,articles/138485.txt,https://www.geeksforgeeks.org/converting-number-to-string-in-cpp/,,"In C converting integers to strings or converting numbers to strings or viceversa is actually a big paradigm shift in itself In general or more specifically in competitive programming there are many instances where we need to convert a number to a string or string to a number Lets look at some methods to convert an integer or a number to a stringConverting Number to String in CThere are 4 major methods to convert a number to a string which are as followsUsing to_stringUsing string StreamUsing sprintf functionUsing boost lexical castMethod 1 Using to_stringThe to_string function can be used to convert an integer floating point values or any number to a string This function accepts a numberwhich can be any data type and returns the number as the desired stringSyntaxstring to_string int valParametersval  Any Numerical ValueReturn ValueA string object containing the representation of value as a sequence of charactersExampleC C code to demonstrate to_string method to convert number to string#include iostream#include string  for string and to_stringusing namespace std  Driver Codeint main     Declaring integer    int i_val  20      Declaring float    float f_val  3050      Conversion of int into string using     to_string    string stri  to_stringi_val      Conversion of float into string using     to_string    string strf  to_stringf_val      Displaying the converted strings    cout  The integer in string is      cout  stri  endl    cout  The float in string is      cout  strf  endl     return 0OutputThe integer in string is  20
The float in string is  30500000Time Complexity OnAuxiliary Space OnMethod 2 Using string streamsIn this method a string stream declares a stream object which first inserts a number as a stream into an object and then uses str to follow the internal conversion of a number to a stringExampleC C code to demonstrate string stream method to convert number to string#includeiostream#include sstream   for string streams#include string   for stringusing namespace stdint main    int num  2016      declaring output string stream    ostringstream str1      Sending a number as a stream into output     string    str1  num      the str converts number into string    string geek  str1str      Displaying the string    cout  The newly formed string from number is      cout  geek  endl     return 0OutputThe newly formed string from number is  2016Time Complexity OnAuxiliary Space OnMethod 3 Using the sprintf functionsprintf function stores the output on the char buffer specified in the function instead of printing the output on the consoleC C Program to illustrate the use of sprintf for number to string conversion#include iostreamusing namespace std int main     any num    int n  12234     string buffer    char str1000      sprintf to print num to str buffer    sprintfstr d n     cout  the string is    str     return 0  this code is contributed by shivanisinghOutputthe string is  12234Time Complexity OnAuxiliary Space OnMethod 4 Using boost lexical castSimilar to string conversion the  lexical_cast  function remains the same but in the boost lexical cast time argument list modifies to lexical_castnumeric_var  ExampleC C code to demonstrate lexical_cast method to convert number to string#include boostlexical_casthpp  for lexical_cast#include iostream#include string  for stringusing namespace std  Driver Codeint main     Declaring float    float f_val  105      Declaring int    int i_val  17      lexical_cast converts a float into string    string strf  boostlexical_caststringf_val      lexical_cast converts a int into string    string stri  boostlexical_caststringi_val      Displaying string converted numbers    cout  The float value in string is      cout  strf  endl    cout  The int value in string is      cout  stri  endl     return 0OutputThe float value in string is  105
The int value in string is  17Time Complexity OnAuxiliary Space OnThis article is contributed by Manjeet Singh If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other Geeks Please write comments if you find anything incorrect or if you want to share more information about the topic discussed above"
138465.0,"Array algorithms in C++ STL (all_of, any_of, none_of, copy_n and iota)",,,"mohitw16,pushpeshrajdx01",0.0,articles/138465.txt,https://www.geeksforgeeks.org/useful-array-algorithms-in-c-stl/,,From C11 onwards some new and interesting algorithms are added in STL of C These algorithms operate on an array and are useful in saving time during coding and hence useful in competitive programming as well all_of This function operates on whole range of array elements and can save time to run a loop to check each elements one by one It checks for a given property on every element and returns true when each element in range satisfies specified property else returns false CPP C code to demonstrate working of all_of#includeiostream#includealgorithm  for all_ofusing namespace stdint main     Initializing array    int ar6   1 2 3 4 5 6      Checking if all elements are positive    all_ofar ar6 int x  return x0           cout  All are positive elements           cout  All are not positive elements     return 0 OutputAll are not positive elementsTime Complexity OnAuxiliary Space O1In the above code 6 being a negative element negates the condition and returns false any_of This function checks for a given range if theres even one element satisfying a given property mentioned in function Returns true if at least one element satisfies the property else returns false CPP C code to demonstrate working of any_of#includeiostream#includealgorithm  for any_ofusing namespace stdint main     Initializing array    int ar6   1 2 3 4 5 6      Checking if any element is negative    any_ofar ar6 int x return x0           cout  There exists a negative element           cout  All are positive elements     return 0 OutputThere exists a negative elementTime Complexity OnAuxiliary Space O1In above code 6 makes the condition positive none_of This function returns true if none of elements satisfies the given condition else returns false CPP C code to demonstrate working of none_of#includeiostream#includealgorithm  for none_ofusing namespace stdint main     Initializing array    int ar6   1 2 3 4 5 6      Checking if no element is negative    none_ofar ar6 int x return x0           cout  No negative elements           cout  There are negative elements     return 0OutputNo negative elementsTime Complexity OnAuxiliary Space O1Since all elements are positive the function returns true copy_n copy_n copies one array elements to new array This type of copy creates a deep copy of array This function takes 3 arguments source array name size of array and the target array name CPP C code to demonstrate working of copy_n#includeiostream#includealgorithm  for copy_nusing namespace stdint main     Initializing array    int ar6   1 2 3 4 5 6      Declaring second array    int ar16      Using copy_n to copy contents    copy_nar 6 ar1      Displaying the copied array    cout  The new array after copying is      for int i0 i6  i       cout  ar1i        return 0 OutputThe new array after copying is  1 2 3 4 5 6Time Complexity OnAuxiliary Space OnIn the above code the elements of ar are copied in ar1 using copy_n iota This function is used to assign continuous values to array This function accepts 3 arguments the array name size and the starting number CPP C code to demonstrate working of iota#includeiostream#includenumeric  for iotausing namespace stdint main     Initializing array with 0 values    int ar6   0      Using iota to assign values    iotaar ar6 20      Displaying the new array    cout  The new array after assigning values is      for int i0 i6  i       cout  ari        return 0 OutputThe new array after assigning values is  20 21 22 23 24 25Time Complexity OnAuxiliary Space O1In the above code continuous values are assigned to array using iota This article is contributed by Manjeet Singh If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other Geeks Please write comments if you find anything incorrect or you want to share more information about the topic discussed above
138439.0,Implement a stack using single queue,,,"Rajput-Ji,NeerajJain,rutvik_56,decode2207,sureel1327,hardikkoriintern,technophpfij",0.0,articles/138439.txt,https://www.geeksforgeeks.org/implement-a-stack-using-single-queue/,,"We are given queue data structure the task is to implement stack using only given queue data structureWe have discussed a solution that uses two queues In this article a new solution is discussed that uses only one queue This solution assumes that we can find size of queue at any point The idea is to keep newly inserted element always at front of queue keeping order of previous elements same Below are complete steps x is the element to be pushed and s is stack
pushs x 
  1 Let size of q be s 
  1 Enqueue x to q
  2 One by one Dequeue s items from queue and enqueue them
  
 Removes an item from stack
pops
  1 Dequeue an item from qBelow is implementation of the ideaC C program to implement a stack using single queue#includebitsstdchusing namespace std  User defined stack that uses a queueclass Stack    queueintqpublic    void pushint val    void pop    int top    bool empty  Push operationvoid Stackpushint val      Get previous size of queue    int s  qsize      Push current element    qpushval      Pop or Dequeue all previous     elements and put them after current     element    for int i0 is i             this will add front element into         rear of queue        qpushqfront          this will delete front element        qpop      Removes the top elementvoid Stackpop    if qempty        cout  No elementsn    else        qpop  Returns top of stackint  Stacktop    return qempty 1  qfront  Returns true if Stack is empty else falsebool Stackempty    return qempty  Driver codeint main    Stack s    spush10    spush20    cout  stop  endl    spop    spush30    spop    cout  stop  endl    return 0Java Java program to implement stack using a single queue import javautilLinkedListimport javautilQueue public class stack    QueueInteger q  new LinkedListInteger          Push operation    void pushint val             get previous size of queue        int size  qsize                  Add current element        qaddval                  Pop or Dequeue all previous         elements and put them after current         element        for int i  0 i  size i                     this will add front element into             rear of queue            int x  qremove            qaddx                      Removes the top element    int pop            if qisEmpty                    SystemoutprintlnNo elements            return 1                int x  qremove        return x              Returns top of stack    int top            if qisEmpty            return 1        return qpeek              Returns true if Stack is empty else false    boolean isEmpty            return qisEmpty          Driver program to test above methods    public static void mainString args            stack s  new stack        spush10        spush20        SystemoutprintlnTop element   stop        spop        spush30        spop        SystemoutprintlnTop element   stop      This code is contributed by Rishabh MahrseePython3# Python3 program to implement stack using a# single queue  q   # append operationdef appendval     # get previous size of queue    size  lenq     # Add current element    qappendval     # Pop or Dequeue all previous    # elements and put them after current    # element    for i in rangesize         # this will add front element into        # rear of queue        x  qpop0        qappendx            # Removes the top elementdef pop     if lenq  0         printNo elements        return 1         x  qpop0    return x # Returns top of stackdef top     iflenq  0        return 1    return q1 # Returns true if Stack is empty else falsedef isEmpty     return lenq0 # Driver program to test above methodsif __name____main__     s       sappend10    sappend20    printTop element   strs1    spop    sappend30    spop    printTop element   strs1         # This code is contributed by rutvik_56C# C# program to implement stack using a single queueusing Systemusing SystemCollectionsGeneric public class stack    Queueint q  new Queueint          Push operation    void pushint val             get previous size of queue        int size  qCount                  Add current element        qEnqueueval                  Pop or Dequeue all previous         elements and put them after current         element        for int i  0 i  size i                     this will add front element into             rear of queue            int x  qDequeue            qEnqueuex                      Removes the top element    int pop            if qCount  0                    ConsoleWriteLineNo elements            return 1                int x  qDequeue        return x              Returns top of stack    int top            if qCount  0            return 1        return qPeek              Returns true if Stack is empty else false    bool isEmpty            ifqCount  0            return true        return false          Driver program to test above methods    public static void MainString args            stack s  new stack        spush10        spush20        ConsoleWriteLineTop element   stop        spop        spush30        spop        ConsoleWriteLineTop element   stop      This code has been contributed by RajputJiJavascriptscript     Javascript program to implement stack using a single queue    let q             Push operation    function Pushval             get previous size of queue        let Size  qlength                   Add current element        qpushval                   Pop or Dequeue all previous         elements and put them after current         element        for let i  0 i  Size i                     this will add front element into             rear of queue            let x  q0            qshift            qpushx                   Removes the top element    function Pop            if isEmpty                    documentwriteNo elements  br            return 1                let x  q0        qshift        return x               Returns top of stack    function Top            if isEmpty            return 1        return q0              Returns true if Stack is empty else false    function isEmpty            ifqlength  0            return true        return false             Push10    Push20    documentwriteTop  br    Pop    Push30    Pop    documentwriteTop  br  This code is contributed by decode2207scriptOutput20
10Time complexity ON where N is size of stackAuxiliary Space ONThis article is contributed by Manu Agrawal If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksRecommendedSolve DSA problems on GfG PracticeSolve Problems"
138430.0,Transpose a matrix in Single line in Python,,,"pwakchaure,tahmidhasan3003,punamsingh628700,shivangtomaslu0",0.0,articles/138430.txt,https://www.geeksforgeeks.org/transpose-matrix-single-line-python/,,Transpose of a matrix is a task we all can perform very easily in Python Using a nested loop But there are some interesting ways to do the same in a single line In Python we can implement a matrix as a nested list a list inside a list Each element is treated as a row of the matrix For example m  1 2 4 5 3 6 represents a matrix of 3 rows and 2 columns The first element of the list  m0 and the element in the first row first column  m00ExampleInput 123456Output 135246Explanation Suppose we are given a matrix                       1 2                        3 4                        5 6Then the transpose of the given matrix will be                        1 3 5                        2 4 6Python Programs to Transpose a Matrix in Single LineThere are various approaches to find the Transpose of a matrix in a single line in Python In this article we will discuss all the approaches which are specific to transposing a matrix in a single line in PythonUsing List ComprehensionUsing zipUsing NumPyUsing itertoolsTranspose Matrix In Single Line using List ComprehensionList comprehension is used to iterate through each element in the matrix In the given example we iterate through each element of matrix m in a columnmajor manner and assign the result to the rez matrix which is the transpose of mPython3m  1 2 3 4 5 6for row in m    printrowrez  mji for j in rangelenm for i in rangelenm0printnfor row in rez    printrowOutput1 23 45 61 3 52 4 6Transpose a matrix in Single line in Python using zipPython Zip returns an iterator of tuples where the ith tuple contains the ith element from each of the argument sequences or iterables In this example we unzip our array using  and then zip it to get the transposePython3matrix  1 2 3 4 5 6                  7 8 9 10 11 12for row in matrix    printrowprintnt_matrix  zipmatrixfor row in t_matrix    printrowOutputNote  If you want your result in the form 147102581136912  you can use t_matrixmaplist zipmatrix1 2 34 5 67 8 910 11 121 4 7 102 5 8 113 6 9 12    Python Programs to Transpose a matrix using NumPyPython NumPy is a generalpurpose arrayprocessing package designed to efficiently manipulate large multidimensional arraysExample 1 The transpose method returns a transposed view of the passed multidimensional matrixPython3import numpymatrix  1 2 3 4 5 6printmatrixprintnprintnumpytransposematrixOutput1 2 3 4 5 61 4 2 5 3 6Example 2 Using T after the variablePython3import numpy as npmatrix  nparray1 2 3 4 5 6printmatrixprintnprintmatrixTOutputAs you can see that both the output are same1 2 3  4 5 61 4 2 5 3 6Fastest way to Transpose a Matrix using ItertoolsPython itertools is a module that provides various functions that work on iterators to produce complex iterators chain is a function that takes a series of iterables and returns one iterableIn this example we are using chain function to convert all the values inside the matrix into a single list and then transpose the matrix This method is way faster then other methodsPython3from itertools import chainimport timeimport numpy as np def transpose2M    n  lenM0    L  listchainM    return Lin for i in rangen start  timetime_nsmatrix  nparray1 2 3 4 5 6end  timetime_nsprinttranspose2matrixprintTime taken endstart nsOutput1 4 2 5 3 6Time taken 108570 ns
142694.0,Puzzle 78 | The lost bus Number,,,"Logical Puzzles,Puzzles",0.0,articles/142694.txt,https://www.geeksforgeeks.org/puzzle-78-the-lost-bus-number/,,Jay was an old friend of Rakesh and was coming to visit him from a small town Jay came over late When Rakesh asked him the reason Jay told him that when he was coming to the city in the bus he had placed his luggage under his seat While getting off he had forgotten to take back the luggage and by the time he had realized the bus had left So he went to a police station to report about it which took him time Rakesh inquired what happened next to which Jay replied that he does not remember the bus number but there was a certain peculiarity about it  the bus number was a perfect square and when turned upside down then it was also a perfect square Jay requested his friend Rakesh to help himRakesh quickly phoned the bus company and came to know they had only 500 buses numbered from 1 to 500 Using this information Rakesh deduced the bus number within a minute Can you tell what was the number   Solution  Bus number was 196Explanation  We know that the only digits which can be turned upside down and still be read as a digit are 0 1 6 8 and 9 The digits 0 1 and 8 remain 0 1 and 8 when turned upside down but 6 becomes 9 and 9 becomes 6 Therefore the possible numbers on the bus are 9 16 81 100 169 and 196 Out of these 196 is the only number which becomes a perfect square when turned over because 961 is the perfect square of 31 Hence 196 is the bus numberThis puzzle is contributed by Feroz Baig Please write comments if you find anything incorrect or you want to share more information about the topic discussed above
138426.0,Print cousins of a given node in Binary Tree,,,"prerna saini,Rajput-Ji,Akanksha_Rai,PranchalKatiyar,rutvik_56,simmytarika5,surinderdawra388,sagartomar9927,rkbhola5,yashagarwal2852002,hardikkoriintern,classroompxico,kirtiagarwal23121999,nakulagrrvt0",0.0,articles/138426.txt,https://www.geeksforgeeks.org/print-cousins-of-a-given-node-in-binary-tree/,,"Given a binary tree and a node print all cousins of given node Note that siblings should not be printedExample  Input  root of below tree 
             1
              
          2     3
               
       4    5  6   7
       and pointer to a node say 5

Output  6 7The idea to first find level of given node using the approach discussed here Once we have found level we can print all nodes at a given level using the approach discussed here The only thing to take care of is sibling should not be printed To handle this we change the printing function to first check for sibling and print node only if it is not siblingBelow is the implementation of above idea C C program to print cousins of a node#include bitsstdchusing namespace std  A Binary Tree Nodestruct Node    int data    Node left right  A utility function to create a new Binary Tree NodeNode newNodeint item    Node temp  new Node    tempdata  item    templeft  tempright  NULL    return temp  It returns level of the node if it ispresent in tree otherwise returns 0int getLevelNode root Node node int level          base cases    if root  NULL        return 0    if root  node        return level      If node is present in left subtree    int downlevel  getLevelrootleft                             node level  1    if downlevel  0        return downlevel      If node is not present in left subtree    return getLevelrootright node level  1  Print nodes at a given level such thatsibling of node is not printed if it exists void printGivenLevelNode root Node node int level     Base cases    if root  NULL  level  2        return      If current node is parent of a node     with given level    if level  2            if rootleft  node  rootright  node            return        if rootleft            cout  rootleftdata           if rootright            cout  rootrightdata          Recur for left and right subtrees    else if level  2            printGivenLevelrootleft node level  1        printGivenLevelrootright node level  1      This function prints cousins of a given nodevoid printCousinsNode root Node node     Get level of given node    int level  getLevelroot node 1      Print nodes of given level    printGivenLevelroot node level  Driver Codeint main    Node root  newNode1    rootleft  newNode2    rootright  newNode3    rootleftleft  newNode4    rootleftright  newNode5    rootleftrightright  newNode15    rootrightleft  newNode6    rootrightright  newNode7    rootrightleftright  newNode8     printCousinsroot rootleftright     return 0  This code is contributed by Akanksha RaiC C program to print cousins of a node#include stdioh#include stdlibh  A Binary Tree Nodestruct Node    int data    Node left right  A utility function to create a new Binary Tree NodeNode newNodeint item    Node temp   new Node    tempdata  item    templeft  tempright  NULL    return temp  It returns level of the node if it is present   in tree otherwise returns 0int getLevelNode root Node node int level     base cases    if root  NULL        return 0    if root  node        return level      If node is present in left subtree    int downlevel  getLevelrootleft node level1    if downlevel  0        return downlevel      If node is not present in left subtree    return getLevelrootright node level1  Print nodes at a given level such that sibling of   node is not printed if it exists  void printGivenLevelNode root Node node int level     Base cases    if root  NULL  level  2        return      If current node is parent of a node with     given level    if level  2            if rootleft  node  rootright  node            return        if rootleft           printfd  rootleftdata        if rootright           printfd  rootrightdata          Recur for left and right subtrees    else if level  2            printGivenLevelrootleft node level1        printGivenLevelrootright node level1      This function prints cousins of a given nodevoid printCousinsNode root Node node     Get level of given node    int level  getLevelroot node 1      Print nodes of given level    printGivenLevelroot node level  Driver Program to test above functionsint main    Node root  newNode1    rootleft  newNode2    rootright  newNode3    rootleftleft  newNode4    rootleftright  newNode5    rootleftrightright  newNode15    rootrightleft  newNode6    rootrightright  newNode7    rootrightleftright  newNode8     printCousinsroot rootleftright     return 0Java Java program to print cousins of a nodepublic class GfG   A Binary Tree Nodestatic class Node    int data    Node left right  A utility function to create a new Binary Tree Nodestatic Node newNodeint item    Node temp  new Node    tempdata  item    templeft  null    tempright  null    return temp  It returns level of the node if it is presentin tree otherwise returns 0static int getLevelNode root Node node int level     base cases    if root  null        return 0    if root  node        return level      If node is present in left subtree    int downlevel  getLevelrootleft node level1    if downlevel  0        return downlevel      If node is not present in left subtree    return getLevelrootright node level1  Print nodes at a given level such that sibling ofnode is not printed if it exists static void printGivenLevelNode root Node node int level     Base cases    if root  null  level  2        return      If current node is parent of a node with     given level    if level  2            if rootleft  node  rootright  node            return        if rootleft  null        Systemoutprintrootleftdata           if rootright  null        Systemoutprintrootrightdata             Recur for left and right subtrees    else if level  2            printGivenLevelrootleft node level1        printGivenLevelrootright node level1      This function prints cousins of a given nodestatic void printCousinsNode root Node node     Get level of given node    int level  getLevelroot node 1      Print nodes of given level    printGivenLevelroot node level  Driver Program to test above functionspublic static void mainString args    Node root  newNode1    rootleft  newNode2    rootright  newNode3    rootleftleft  newNode4    rootleftright  newNode5    rootleftrightright  newNode15    rootrightleft  newNode6    rootrightright  newNode7    rootrightleftright  newNode8     printCousinsroot rootleftrightPython3# Python3 program to print cousins of a node # A utility function to create a new# Binary Tree Nodeclass newNode    def __init__self item        selfdata  item        selfleft  selfright  None # It returns level of the node if it is# present in tree otherwise returns 0def getLevelroot node level         # base cases    if root  None        return 0    if root  node        return level     # If node is present in left subtree    downlevel  getLevelrootleft node                               level  1    if downlevel  0        return downlevel     # If node is not present in left subtree    return getLevelrootright node level  1 # Print nodes at a given level such that# sibling of node is not printed if# it existsdef printGivenLevelroot node level         # Base cases    if root  None or level  2        return     # If current node is parent of a    # node with given level    if level  2        if rootleft  node or            rootright  node            return        if rootleft            printrootleftdata end           if rootright            printrootrightdata end        # Recur for left and right subtrees    elif level  2        printGivenLevelrootleft node level  1        printGivenLevelrootright node level  1 # This function prints cousins of a given nodedef printCousinsroot node         # Get level of given node    level  getLevelroot node 1     # Print nodes of given level    printGivenLevelroot node level # Driver Codeif __name__  __main__    root  newNode1    rootleft  newNode2    rootright  newNode3    rootleftleft  newNode4    rootleftright  newNode5    rootleftrightright  newNode15    rootrightleft  newNode6    rootrightright  newNode7    rootrightleftright  newNode8     printCousinsroot rootleftright     # This code is contributed by PranchalKC# C# program to print cousins of a nodeusing System public class GfG  A Binary Tree Nodeclass Node    public int data    public Node left right  A utility function to create  a new Binary Tree Nodestatic Node newNodeint item    Node temp  new Node    tempdata  item    templeft  null    tempright  null    return temp  It returns level of the nodeif it is present in tree otherwise returns 0static int getLevelNode root            Node node int level     base cases    if root  null        return 0    if root  node        return level      If node is present in left subtree    int downlevel  getLevelrootleft node level  1    if downlevel  0        return downlevel      If node is not present in left subtree    return getLevelrootright node level  1  Print nodes at a given levelsuch that sibling of node is not printed if it exists static void printGivenLevelNode root                    Node node int level     Base cases    if root  null  level  2        return      If current node is parent of a node with     given level    if level  2            if rootleft  node  rootright  node            return        if rootleft  null            ConsoleWriterootleftdata           if rootright  null            ConsoleWriterootrightdata             Recur for left and right subtrees    else if level  2            printGivenLevelrootleft node level  1        printGivenLevelrootright node level  1      This function prints cousins of a given nodestatic void printCousinsNode root Node node     Get level of given node    int level  getLevelroot node 1      Print nodes of given level    printGivenLevelroot node level  Driver codepublic static void MainString args    Node root  newNode1    rootleft  newNode2    rootright  newNode3    rootleftleft  newNode4    rootleftright  newNode5    rootleftrightright  newNode15    rootrightleft  newNode6    rootrightright  newNode7    rootrightleftright  newNode8     printCousinsroot rootleftright  This code is contributed RajputJiJavascriptscript   JavaScript program to print cousins of a node  A Binary Tree Nodeclass Node  constructor      thisdata0    thisleft null    thisright  null    A utility function to create  a new Binary Tree Nodefunction newNodeitem    var temp  new Node    tempdata  item    templeft  null    tempright  null    return temp  It returns level of the nodeif it is present in tree otherwise returns 0function getLevelroot node level     base cases    if root  null        return 0    if root  node        return level      If node is present in left subtree    var downlevel  getLevelrootleft node level  1    if downlevel  0        return downlevel      If node is not present in left subtree    return getLevelrootright node level  1  Print nodes at a given levelsuch that sibling of node is not printed if it exists function printGivenLevelroot node level     Base cases    if root  null  level  2        return      If current node is parent of a node with     given level    if level  2            if rootleft  node  rootright  node            return        if rootleft  null            documentwriterootleftdata           if rootright  null            documentwriterootrightdata             Recur for left and right subtrees    else if level  2            printGivenLevelrootleft node level  1        printGivenLevelrootright node level  1      This function prints cousins of a given nodefunction printCousinsroot node     Get level of given node    var level  getLevelroot node 1      Print nodes of given level    printGivenLevelroot node level  Driver codevar root  newNode1rootleft  newNode2rootright  newNode3rootleftleft  newNode4rootleftright  newNode5rootleftrightright  newNode15rootrightleft  newNode6rootrightright  newNode7rootrightleftright  newNode8printCousinsroot rootleftright scriptOutput6 7Time Complexity  OnAuxiliary Space On due to recursionAnother ApproachIterative ApproachAn efficient and easy to implement approach by level order traversal using queueFollow the below steps to solve this problem1 First perform level order traversal using queue2 Check for each node that its left or right child is match with targetgiven node then dont insert its childrens and mark found variable to true but insert other nodes of just upper nodes in queue3 After insert all the nodes print them and returnBelow is the implementation of above approachC C program to print cousins of a node#include bitsstdchusing namespace std  A Binary Tree Nodestruct Node    int data    Node left right  return a new tree nodeNode newNodeint data    Node temp  new Node    tempdata  data    templeft  tempright  NULL    return temp  function prints the cousins of a given nodevoid printCousinsNode root Node node     base condition    ifroot  NULL return     initializing bool function to track target node     is found or not    bool found  false     initializing queue to perform level order traversal    queueNode q    qpushroot    whileqempty        int n  qsize        forint i  0 in i            Node temp  qfront            qpop            iftempleft  node  tempright  node                found  true            else                iftempleft qpushtempleft                iftempright qpushtempright                            iffound            whileqempty                coutqfrontdata                 qpop                        coutendl            return              Driver Code to test above functionint main    Node root  newNode1    rootleft  newNode2    rootright  newNode3    rootleftleft  newNode4    rootleftright  newNode5    rootleftrightright  newNode15    rootrightleft  newNode6    rootrightright  newNode7    rootrightleftright  newNode8     printCousinsroot rootleftright     return 0 THIS CODE IS CONTRIBUTED BY YASH AGARWALYASHAGARWAL2852002Javapackage whatever do not write package name here  import javaioimport javautil java program to print cousins of a node  A Binary Tree Nodeclass Node  int data  Node left  Node right   Nodeint d    data  d    left  null    right  null    public class Main     function prints the cousins of a given node  public static void printCousinsNode root Node node     base condition    ifroot  null return     initializing bool function to track target node     is found or not    boolean found  false     initializing queue to perform level order traversal    QueueNode q  new LinkedList    qaddroot    whileqsize  0      int n  qsize      forint i  0 in i        Node temp  qremove        iftempleft  node  tempright  node          found  true        else          iftempleft  null qaddtempleft          iftempright  null qaddtempright                    iffound  true        whileqsize  0          Systemoutprintqremovedata                   return               public static void mainString args     Node root  new Node1    rootleft  new Node2    rootright  new Node3    rootleftleft  new Node4    rootleftright  new Node5    rootleftrightright  new Node15    rootrightleft  new Node6    rootrightright  new Node7    rootrightleftright  new Node8     printCousinsroot rootleftright    This Code is contributed by Nidhi goelPython3# python program to print cousins of a node# A binary tree nodeclass Node     def __init__self data        selfdata  data        selfleft  selfright  None   # function prints the cousins of a given nodedef printCousinsroot node    # base condition    if root  None        return    # initializing bool function to track target node    # is found or not    found  False    # intializing queue to perform level order traversal    q      qappendroot    whilelenq  0        n  lenq        for i in rangen            temp  q0            qpop0            if templeft  node or tempright  node                found  True            else                iftempleft                    qappendtempleft                iftempright                    qappendtempright         if found            whilelenq  0                printqpop0data            return # driver code to test above functionroot  Node1rootleft  Node2rootright  Node3rootleftleft  Node4rootleftright  Node5rootleftrightright  Node15rootrightleft  Node6rootrightright  Node7rootrightleftright  Node8 printCousinsroot rootleftright # The code is contributed by Nidhi goelC# C# program to print cousins of a nodeusing Systemusing SystemCollectionsGeneric public class GfG    A Binary Tree Node  class Node      public int data    public Node left right      A utility function to create    a new Binary Tree Node  static Node newNodeint item      Node temp  new Node    tempdata  item    templeft  null    tempright  null    return temp      function prints the cousins of a given node  static void printCousinsNode root Node node     base condition    ifroot  null      return     initializing bool function to track target node     is found or not    bool found  false     initializing queue to perform level order traversal    QueueNode q  new QueueNode    qEnqueueroot    whileqCount0      int n  qCount      forint i  0 in i        Node temp  qDequeue        iftempleft  node  tempright  node          found  true                else          iftempleftnull            qEnqueuetempleft          iftemprightnull            qEnqueuetempright                    iffound        whileqCount0          Node tempqDequeue          ConsoleWritetempdata                 ConsoleWriteLine        return                Driver Code to test above function  public static void MainString args      Node root  newNode1    rootleft  newNode2    rootright  newNode3    rootleftleft  newNode4    rootleftright  newNode5    rootleftrightright  newNode15    rootrightleft  newNode6    rootrightright  newNode7    rootrightleftright  newNode8     printCousinsroot rootleftright   Javascript JavaScript program to print cousins of a node A binary tree node THIS CODE IS CONTRIBUTED BY KIRTI AGARWALKIRTIAGARWAL23121999class Node    constructordata        thisdata  data        thisleft  thisright  null      return a new tree nodefunction newNodedata    return new Nodedata  function prints the cousins of a given nodefunction printCousinsroot node     base condition    ifroot  null return     initializing bool function to track target node     is found or not    let found  false     initializing queue to perform level order traversal    let q      qpushroot    whileqlength  0        let n  qlength        forlet i  0 in i            let temp  qshift            iftempleft  node  tempright  node                found  true                        else                iftempleft qpushtempleft                iftempright qpushtempright                            iffound            whileqlength  0                documentwriteqshiftdata                        return              driver code to test above functionlet root  newNode1rootleft  newNode2rootright  newNode3rootleftleft  newNode4rootleftright  newNode5rootleftrightright  newNode15rootrightleft  newNode6rootrightright  newNode7rootrightleftright  newNode8 printCousinsroot rootleftrightOutput6 7 Time Complexity ON where N is the number of nodes in a given binary treeAuxiliary Space ON due to queue data structureCan we solve this problem using single traversal Please refer below article Print cousins of a given node in Binary Tree  Single TraversalThis article is contributed by Shivam Gupta If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksRecommendedSolve DSA problems on GfG PracticeSolve Problems"
138421.0,"Set a variable without using Arithmetic, Relational or Conditional Operator",,,"cpp-operator,C Language,C++",0.0,articles/138421.txt,https://www.geeksforgeeks.org/set-variable-without-using-arithmetic-relational-conditional-operator/,,"Given three integers a b and c where c can be either 0 or 1 Without using any arithmetic relational and conditional operators set the value of a variable x based on below rules 
If c  0
    x  a
Else  Note c is binary
    x  b
Examples
Input a  5 b  10 c  0
Output x  5

Input a  5 b  10 c  1
Output x  10
Solution 1 Using arithmetic operatorsIf we are allowed to use arithmetic operators we can easily calculate x by using any one of below expressions 
x  1  c  a  c  b

OR

x  a  b  c  b  c  a

OR

x  a  c  b  c
#include iostreamusing namespace std  int calculateint a int b int c    return 1  c  a  c  b   int main   int a  5 b  10 c  0         int x  calculatea b c   cout  x  endl         return 0Output
5
 Solution 2 Without using arithmetic operatorsThe idea is to construct an array of size 2 such that index 0 of the array stores value of variable a and index 1 value of variable b Now we return value at index 0 or at index 1 of the array based on value of variable c#include iostreamusing namespace std  int calculateint a int b int c   int arr  a b   return arr  c  int main   int a  5 b  10 c  1         int x  calculatea b c   cout  x  endl         return 0Output
10
This article is contributed by Aditya Goel  If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above"
138419.0,What is Array Decay in C++? How can it be prevented?,,,arjun108,0.0,articles/138419.txt,https://www.geeksforgeeks.org/what-is-array-decay-in-c-how-can-it-be-prevented/,,"What is Array Decay The loss of type and dimensions of an array is known as decay of an arrayThis generally occurs when we pass the array into function by value or pointer What it does is it sends first address to the array which is a pointer hence the size of array is not the original one but the one occupied by the pointer in the memory CPP C code to demonstrate array decay#includeiostreamusing namespace std   Driver function to show Array decay Passing array by valuevoid aDecayint p     Printing size of pointer    cout  Modified size of array is by              passing by value     cout  sizeofp  endl   Function to show that array decay happens  even if we use pointervoid pDecayint p7     Printing size of array    cout  Modified size of array by             passing by pointer     cout  sizeofp  endl  int main    int a7  1 2 3 4 5 6 7       Printing original size of array    cout  Actual size of array is     cout  sizeofa endl       Passing a pointer to array    aDecaya           Calling function by pointer    pDecaya         return 0OutputActual size of array is 28
Modified size of array by passing by value 8
Modified size of array by passing by pointer 8In the above code the actual array has 7 int elements and hence has 28 size But by calling by value and pointer array decays into pointer and prints the size of 1 pointer ie 8 4 in 32 bitHow to prevent Array Decay A typical solution to handle decay is to pass size of array also as a parameter and not use sizeof on array parameters See this for detailsAnother way to prevent array decay is to send the array into functions by reference This prevents conversion of array into a pointer hence prevents the decay CPP C code to demonstrate prevention of decay of array#includeiostreamusing namespace std   A function that prevents Array decay by passing array by referencevoid funint p7     Printing size of array    cout  Modified size of array by             passing by reference     cout  sizeofp  endl  int main    int a7  1 2 3 4 5 6 7       Printing original size of array    cout  Actual size of array is     cout  sizeofa endl       Calling function by reference    funa      return 0OutputActual size of array is 28
Modified size of array by passing by reference 28In the above code passing array by reference solves the problem of decay of array Sizes in both cases is 28 This article is contributed by Manjeet Singh If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above"
138415.0,Find Cube Pairs | Set 2 (A n^(1/3) Solution),,,"Mithun Kumar,vt_m,amit143katiyar,simmytarika5",0.0,articles/138415.txt,https://www.geeksforgeeks.org/find-cube-pairs-set-2-n13-solution/,,"Given a number n find two pairs that can represent the number as sum of two cubes In other words find two pairs a b and c d such that given number n can be expressed as  n  a3  b3  c3  d3where a b c and d are four distinct numbersExamples  Input n  1729
Output 1 12 and 9 10
Explanation 
1729  13  123  93  103

Input n  4104
Output 2 16 and 9 15
Explanation 
4104  23  163  93  153

Input n  13832
Output 2 24 and 18 20
Explanation 
13832  23  243  183  203 We have discussed a On23 solution in below set 1Find Cube Pairs  Set 1 A n23 SolutionIn this post a On13 solution is discussedAny number n that satisfies the constraint will have two distinct pairs a b and c d such that a b c and d are all less than n13 The idea is to create an auxiliary array of size n13 Each index i in the array will store value equal to cube of that index ie arri  i3 Now the problem reduces to finding pair of elements in an sorted array whose sum is equal to given number n The problem is discussed in detail hereBelow is the implementation of above idea   C C program to find pairs that can represent the given number as sum of two cubes#include iostream#include cmathusing namespace std  Function to find pairs that can represent the given number as sum of two cubesvoid findPairsint n     find cube root of n    int cubeRoot  pown 10  30      create a array of size of size cubeRoot    int cubecubeRoot  1      for index i cubei will contain i3    for int i  1 i  cubeRoot i        cubei  iii      Find all pairs in above sorted     array cube whose sum is equal to n    int l  1    int r  cubeRoot     while l  r            if cubel  cuber  n            l        else ifcubel  cuber  n            r        else             cout    l       r                    endl            l r              Driver functionint main    int n  20683    findPairsn     return 0Java Java program to find pairs that can represent the given number as sum of two cubesimport javaio class GFG      Function to find pairs that can represent the given number as sum of two cubesstatic void findPairsint n     find cube root of n    int cubeRoot  intMathpow                             n 10  30      create a array of     size of size cubeRoot    int cube  new intcubeRoot  1      for index i cubei     will contain i3    for int i  1 i  cubeRoot i        cubei  i  i  i      Find all pairs in above     sorted array cube     whose sum is equal to n    int l  1    int r  cubeRoot     while l  r            if cubel  cuber  n            l        else ifcubel  cuber  n            r        else             Systemoutprintln  l                                  r                                                l r              Driver Codepublic static void main String argsint n  20683findPairsn  This code is contributed by anuj_67Python3# Python3 program to find pairs that# can represent the given number# as sum of two cubesimport math # Function to find pairs that can# represent the given number as# sum of two cubesdef findPairs n         # find cube root of n    cubeRoot  intmathpown 10  30     # create a array of    # size of size cubeRoot    cube  0  cubeRoot  1     # for index i cubei    # will contain i3    for i in range1 cubeRoot  1        cubei  i  i  i     # Find all pairs in above sorted    # array cube whose sum    # is equal to n    l  1    r  cubeRoot     while l  r        if cubel  cuber  n            l  1        else ifcubel  cuber  n            r  1        else            print  l     mathfloorr                                   end              print            l  1            r  1 # Driver coden  20683findPairsn # This code is contributed by mitsC# C# program to find pairs that can represent the given number as sum of two cubesusing System class GFG      Function to find pairs that can represent the given number as sum of two cubesstatic void findPairsint n     find cube root of n    int cubeRoot  intMathPown 10                                     30      create a array of     size of size cubeRoot    int cube  new intcubeRoot  1      for index i cubei     will contain i3    for int i  1 i  cubeRoot i        cubei  i  i  i      Find all pairs in above     sorted array cube     whose sum is equal to n    int l  1    int r  cubeRoot     while l  r            if cubel  cuber  n            l        else ifcubel  cuber  n            r        else             ConsoleWriteLine  l                                  r                                                l r              Driver Codepublic static void Main     int n  20683    findPairsn  This code is contributed by anuj_67PHPphp PHP program to find pairs that can represent the given number as sum of two cubes  Function to find pairs that can represent the given number as sum of two cubesfunction findPairs n          find cube root of n    cubeRoot  pown 10  30      create a array of     size of size cubeRoot    cube  array      for index i cubei     will contain i3    for i  1 i  cubeRoot i        cubei  i  i  i      Find all pairs in above sorted     array cube whose sum     is equal to n    l  1    r  cubeRoot     while l  r            if cubel  cuber n            l        else ifcubel  cuber  n            r        else                    echo   l     floorr                                  echo n            lr              Driver coden  20683findPairsn  This code is contributed by anuj_67Javascriptscript  Javascript program to find pairs that can represent the given number as sum of two cubes  Function to find pairs that can represent the given number as sum of two cubesfunction findPairsn     find cube root of n    var cubeRoot  parseIntMathpow                             n 10  30      create a array of     size of size cubeRoot    var cube  Arrayfromlength cubeRoot  1 _ i  0      for index i cubei     will contain i3    for i  1 i  cubeRoot i        cubei  i  i  i      Find all pairs in above     sorted array cube     whose sum is equal to n    var l  1    var r  cubeRoot     while l  r            if cubel  cuber  n            l        else ifcubel  cuber  n            r        else             documentwrite  l                                  r                                   br             l r              Driver Codevar n  20683findPairsn   This code is contributed by Amit Katiyar scriptOutput 10 27
19 24Time Complexity of above solution is On13This article is contributed by Aditya Goel If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above RecommendedSolve DSA problems on GfG PracticeSolve Problems"
138396.0,Find frequency of each element in a limited range array in less than O(n) time,,,"29AjayKumar,ukasp,andrew1234,SURENDRA_GANGWAR,princi singh,SHUBHAMSINGH10,pushpeshrajdx01,devi_johns,shivanisinghss2110,yadavd,anushikasethh,shikhasingrajput,avanitrachhadiya2155,rag2127,adityakumar129,surinderdawra388,patel2127,satyaramanaidu,phasing17,janardansthox,gangarajul8khm,vikram_rajput,akshitaguprzj3",0.0,articles/138396.txt,https://www.geeksforgeeks.org/find-frequency-of-each-element-in-a-limited-range-array-in-less-than-on-time/,,"Given a sorted array arr of positive integers the task is to find the frequency for each element in the array Assume all elements in the array are less than some constant MNote Do this without traversing the complete array ie expected time complexity is less than OnExamples Input arr  1 1 1 2 3 3 5 5 8 8 8 9 9 10Output Element 1 occurs 3 timesElement 2 occurs 1 timesElement 3 occurs 2 timesElement 5 occurs 2 timesElement 8 occurs 3 timesElement 9 occurs 2 timesElement 10 occurs 1 times Input arr  2 2 6 6 7 7 7 11 Output Element 2 occurs 2 timesElement 6 occurs 2 timesElement 7 occurs 3 timesElement 11 occurs 1 timesFrequency of each element in a limited range array using linear searchTo solve the problem follow the below ideaTraverse the input array and increment the frequency of the element if the current element and the previous element are the same otherwise reset the frequency and print the element and its frequencyFollow the given steps to solve the problem Initialize frequency to 1 and index to 1Traverse the array from the index position and check if the current element is equal to the previous elementIf yes increment the frequency and index and repeat step 2 Otherwise print the element and its frequency and repeat step 2At lastcorner case print the last element and its frequencyBelow is the implementation of the above approachC C program to count number of occurrences of
 each element in the array in On time and O1 space

#include bitsstdch
using namespace std

void findFrequenciesint ele int n

    int freq  1
    int idx  1
    int element  ele0
    while idx  n 

         check if the current element is equal to
         previous element
        if eleidx  1  eleidx 
            freq
            idx
        
        else 
            cout  element     freq  endl
            element  eleidx
            idx

             reset the frequency
            freq  1
        
    

     print the last element and its frequency
    cout  element     freq


 Driver code
int main

    cout  frequencies in a sorted array  endl
    int arr
          10 20 30 30 30 40 50 50 50 50 70 
    int n  sizeofarr  sizeofarr0

     Function call
    findFrequenciesarr n


 This code is contributed by anushkaseehhJava Java program to count number of occurrences of
 each element in the array in On time and O1 space

import javaio
import javautil
class GFG 
    public static void findFrequenciesint ele int n
    
        int freq  1
        int idx  1
        int element  ele0
        while idx  n 
             check if the current element is equal to
             previous element
            if eleidx  1  eleidx 
                freq
                idx
            
            else 
                Systemoutprintlnelement     freq
                element  eleidx
                idx

                 reset the frequency
                freq  1
            
        

         print the last element and its frequency
        Systemoutprintlnelement     freq
    

     Driver code
    public static void mainString args
    

        Systemoutprintln
            frequencies in a sorted array
        int arr   10 20 30 30 30 40
                      50 50 50 50 70 
        int n  arrlength

         Function call
        findFrequenciesarr n
    


 This code is contributed by Pushpesh rajPython3# python3 program to count number of occurrences of
# each element in the array in On time and O1 space


def findFrequenciesele n

    freq  1
    idx  1
    element  ele0
    while idx  n

        # check if the current element is equal to
        # previous element
        if eleidx  1  eleidx
            freq  1
            idx  1

        else
            printelement   freq
            element  eleidx
            idx  1

            # reset the frequency
            freq  1

    # print the last element and its frequency
    printelement   freq


# Driver code
if __name__  __main__
    printfrequencies in a sorted array
    arr  10 20 30 30 30 40 50 50 50 50 70
    n  lenarr

    # Function call
    findFrequenciesarr n

# This code is contributed by shivanisinghss2110
C# C# program to count number of occurrences of
 each element in the array in On time and O1 space
using System
class GFG 

    public static void findFrequenciesint ele
    
        int freq  1
        int idx  1
        int element  ele0
        while idx  eleLength 

             check if the current element is equal to
             previous element
            if eleidx  1  eleidx 
                freq
                idx
            
            else 
                ConsoleWriteLineelement     freq
                element  eleidx
                idx

                 reset the frequency
                freq  1
            
        

         print the last element and its frequency
        ConsoleWriteLineelement     freq
    

     Driver code
    public static void MainString args
    
        ConsoleWriteLine
            frequencies in a sorted array

         Function call
        findFrequenciesnew int  10 20 30 30 30 40
                                    50 50 50 50 70 
    
Javascriptscript
 JavaScript program to count number of occurrences of
 each element in the array in On time and O1 space
    function void findFrequenciesele
    
        var freq  1
        var idx  1
        var element  ele0
        while idx  elelength
        
        
             check if the current element is equal to
             previous element
            if eleidx  1  eleidx 
                freq
                idx
            
            else
            
                documentwriteelement     freq
                element  eleidx
                idx
                
                 reset the frequency
                freq  1
            
        
        
         print the last element and its frequency
        documentwriteelement     freq
    
    
     Driver code
        documentwrite
            frequencies in a sorted array
        findFrequenciesnew var  10 20 30 30 30 40
                                    50 50 50 50 70 
    
 This code is contributed by shivanisinghss2110
scriptOutputfrequencies in a sorted array
10 1
20 1
30 3
40 1
50 4
70 1Time Complexity ONAuxiliary Space O1Frequency of each element in a limited range array using HashMapTo solve the problem follow the below ideaThe idea is to traverse the input array and for each distinct element of the array store its frequency in a HashMap and finally print the HashMapFollow the given steps to solve the problem Create a HashMap to map the frequency to the element ie to store the elementfrequency pairTraverse the array from start to endFor each element in the array update the frequency ie hmarrayiTraverse the HashMap and print the element frequency pairBelow is the implementation of the above approachC C program to count number of occurrences of
 each element in the array #include iostream
#include bitsstdch
using namespace std

 It prints number of
 occurrences of each element in the array
void findFrequencyint arr int n

     HashMap to store frequencies
    unordered_mapint int mp

     traverse the array
    for int i  0 i  n i 
         update the frequency
        mparri
    

     traverse the hashmap
    for auto i  mp 
        cout  Element   ifirst   occurs 
              isecond   times  endl
    


 Driver code
int main

    int arr
          1 1 1 2 3 3 5 5 8 8 8 9 9 10 
    int n  sizeofarr  sizeofarr0

     Function call
    findFrequencyarr n

    return 0
Java Java program to count number
 of occurrences of each
 element in the array
import javaio
import javautil
class GFG 

     It prints number of
     occurrences of each
     element in the array
    static void findFrequencyint arr int n
    
        MapInteger Integer mp
             new HashMapInteger Integer

         traverse the array
        for int i  0 i  n i 

             update the frequency
            if mpcontainsKeyarri
                mpputarri 0

            mpputarri mpgetarri  1
        

         traverse the hashmap
        for MapEntryInteger Integer kvp 
             mpentrySet 
            SystemoutprintlnElement   kvpgetKey
                                 occurs   kvpgetValue
                                 times
        
    

     Driver code
    public static void mainString args
    

        int arr
              1 1 1 2 3 3 5 5 8 8 8 9 9 10 
        int n  arrlength

         Function call
        findFrequencyarr n
    


 This code is contributed by avanitrachhadiya2155Python3# Python program to count number of occurrences of
# each element in the array #include iostream

# It prints number of
# occurrences of each element in the array


def findFrequencyarr n

    # HashMap to store frequencies
    mp  

    # traverse the array
    for i in rangen

        # update the frequency
        if arri not in mp
            mparri  0
        mparri  1

    # traverse the hashmap
    for i in mp
        printElement i occurs mpi times


# Driver function
if __name__  __main__
    arr  1 1 1 2 3 3 5 5 8 8 8 9 9 10
    n  lenarr

    findFrequencyarr n

# This code is contributed by shubhamsingh10
C# C# program to count number
 of occurrences of each
 element in the array
using System
using SystemCollectionsGeneric
class GFG 

     It prints number of
     occurrences of each
     element in the array
    static void findFrequencyint arr int n
    
         HashMap to store frequencies
        Dictionaryint int mp
             new Dictionaryint int

         traverse the array
        for int i  0 i  n i 
             update the frequency
            if mpContainsKeyarri
                mparri  0

            mparri
        

         traverse the hashmap
        foreachKeyValuePairint int kvp in mp
            ConsoleWriteLineElement   kvpKey
                                occurs   kvpValue
                                times
    

     Driver code
    public static void Main
    
        int arr
              1 1 1 2 3 3 5 5 8 8 8 9 9 10 
        int n  arrLength

         Function call
        findFrequencyarr n
    


 This code is contributed by ChitranayalJavascriptscript

 Javascript program to count number
 of occurrences of each
 element in the array

 It prints number of
 occurrences of each
 element in the array
function findFrequencyarr n

    let mp  new Map
 
     Traverse the array
    forlet i  0 i  n i
    
 
         Update the frequency
        if mphasarri
            mpsetarri0
        
        mpsetarri mpgetarri  1
    
 
     Traverse the hashmap
    forlet key value of mpentries
    
        documentwriteElement   key 
                        occurs   value 
                        timesbr
    


 Driver code
let arr   1 1 1 2 3 3 5 
            5 8 8 8 9 9 10 
let n  arrlength

findFrequencyarr n

 This code is contributed by patel2127

scriptOutputElement 10 occurs 1 times
Element 9 occurs 2 times
Element 8 occurs 3 times
Element 5 occurs 2 times
Element 3 occurs 2 times
Element 2 occurs 1 times
Element 1 occurs 3 timesTime Complexity ON only one traversal of the array is neededAuxiliary Space ON to store the elements in the HashMap ON extra space is neededFrequency of each element in a limited range array using binary searchThe problem can be solved in less than On time if all its elements are sorted ie if similar elements exist in the array then the elements are in a contiguous subarray or it can be said that if the ends of a subarray are the same then all the elements inside the subarray are equal So the count of that element is the size of the subarray and all the elements of that subarray need not be counted  Follow the given steps to solve the problem Create a HashMap hm to store the frequency of elementsCreate a recursive function that accepts an array and sizeCheck if the first element of the array is equal to the last element If equal then all the elements are the same and update the frequency by hmarray0sizeElse divide the array into two equal halves and call the function recursively for both halvesTraverse the hashmap and print the element frequency pairBelow is the implementation of the above approachC C program to count number of occurrences of
 each element in the array in less than On time
#include bitsstdch
using namespace std

 A recursive function to count number of occurrences
 for each element in the array without traversing
 the whole array
void findFrequencyUtilint arr int low int high
                       vectorint freq

     If element at index low is equal to element
     at index high in the array
    if arrlow  arrhigh 
         increment the frequency of the element
         by count of elements between high and low
        freqarrlow  high  low  1
    
    else 
         Find mid and recurse for left and right
         subarray
        int mid  low  high  2
        findFrequencyUtilarr low mid freq
        findFrequencyUtilarr mid  1 high freq
    


 A wrapper over recursive function
 findFrequencyUtil It print number of
 occurrences of each element in the array
void findFrequencyint arr int n

     create a empty vector to store frequencies
     and initialize it by 0 Size of vector is
     maximum value which is last value in sorted
     array plus 1
    vectorint freqarrn  1  1 0

     Fill the vector with frequency
    findFrequencyUtilarr 0 n  1 freq

     Print the frequencies
    for int i  0 i  arrn  1 i
        if freqi  0
            cout  Element   i   occurs   freqi
                   times  endl


 Driver code
int main

    int arr
          1 1 1 2 3 3 5 5 8 8 8 9 9 10 
    int n  sizeofarr  sizeofarr0

     Function call
    findFrequencyarr n

    return 0
Java Java program to count number of occurrences of
 each element in the array in less than On time
import javautil

class GFG 

     A recursive function to count number of occurrences
     for each element in the array without traversing
     the whole array
    static void findFrequencyUtilint arr int low
                                  int high int freq
    
         If element at index low is equal to element
         at index high in the array
        if arrlow  arrhigh 
             increment the frequency of the element
             by count of elements between high and low
            freqarrlow  high  low  1
        
        else 
             Find mid and recurse for left and right
             subarray
            int mid  low  high  2
            findFrequencyUtilarr low mid freq
            findFrequencyUtilarr mid  1 high freq
        
    

     A wrapper over recursive function
     findFrequencyUtil It print number of
     occurrences of each element in the array
    static void findFrequencyint arr int n
    
         create a empty vector to store frequencies
         and initialize it by 0 Size of vector is
         maximum value which is last value in sorted
         array plus 1
        int freq  new intarrn  1  1

         Fill the vector with frequency
        findFrequencyUtilarr 0 n  1 freq

         Print the frequencies
        for int i  0 i  arrn  1 i
            if freqi  0
                SystemoutprintlnElement   i
                                     occurs   freqi
                                     times
    

     Driver Code
    public static void mainString args
    
        int arr
              1 1 1 2 3 3 5 5 8 8 8 9 9 10 
        int n  arrlength

         Function call
        findFrequencyarr n
    


 This code is contributed by 29AjayKumarPython3# Python 3 program to count number of occurrences of
# each element in the array in less than On time

# A recursive function to count number of occurrences
# for each element in the array without traversing
# the whole array


def findFrequencyUtilarr low high freq

    # If element at index low is equal to element
    # at index high in the array
    if arrlow  arrhigh

        # increment the frequency of the element
        # by count of elements between high and low
        freqarrlow  high  low  1

    else

        # Find mid and recurse for left
        # and right subarray
        mid  intlow  high  2
        findFrequencyUtilarr low mid freq
        findFrequencyUtilarr mid  1 high freq

# A wrapper over recursive function
# findFrequencyUtil It print number of
# occurrences of each element in the array


def findFrequencyarr n

    # create a empty vector to store frequencies
    # and initialize it by 0 Size of vector is
    # maximum value which is last value in sorted
    # array plus 1
    freq  0 for i in rangen  1  1

    # Fill the vector with frequency
    findFrequencyUtilarr 0 n  1 freq

    # Print the frequencies
    for i in range0 arrn  1  1 1
        if freqi  0
            printElement i occurs
                  freqi times


# Driver Code
if __name__  __main__
    arr  1 1 1 2 3 3 5
           5 8 8 8 9 9 10
    n  lenarr

    # Function call
    findFrequencyarr n

# This code is contributed by
# Surendra_Gangwar
C# C# program to count number of occurrences of
 each element in the array in less than On time
using System

class GFG 

     A recursive function to count number of occurrences
     for each element in the array without traversing
     the whole array
    static void findFrequencyUtilint arr int low
                                  int high int freq
    
         If element at index low is equal to element
         at index high in the array
        if arrlow  arrhigh 
             increment the frequency of the element
             by count of elements between high and low
            freqarrlow  high  low  1
        
        else 
             Find mid and recurse for left and right
             subarray
            int mid  low  high  2
            findFrequencyUtilarr low mid freq
            findFrequencyUtilarr mid  1 high freq
        
    

     A wrapper over recursive function
     findFrequencyUtil It print number of
     occurrences of each element in the array
    static void findFrequencyint arr int n
    
         create a empty vector to store frequencies
         and initialize it by 0 Size of vector is
         maximum value which is last value in sorted
         array plus 1
        int freq  new intarrn  1  1

         Fill the vector with frequency
        findFrequencyUtilarr 0 n  1 freq

         Print the frequencies
        for int i  0 i  arrn  1 i
            if freqi  0
                ConsoleWriteLineElement   i
                                    occurs   freqi
                                    times
    

     Driver Code
    public static void MainString args
    
        int arr
              1 1 1 2 3 3 5 5 8 8 8 9 9 10 
        int n  arrLength

         Function call
        findFrequencyarr n
    


 This code is contributed by Princi SinghJavascriptscript
 Javascript program to count number of occurrences of
 each element in the array in less than On time
    
     A recursive function to count number of occurrences
     for each element in the array without traversing
     the whole array
    function findFrequencyUtilarr low high freq
    
    
         If element at index low is equal to element
         at index high in the array
        if arrlow  arrhigh 
        
        
             increment the frequency of the element
             by count of elements between high and low
            freqarrlow  high  low  1
        
        else 
        
        
             Find mid and recurse for left and right
             subarray
            let mid  Mathfloorlow  high  2
            findFrequencyUtilarr low mid freq
            findFrequencyUtilarr mid  1 high freq
        
    
    
     A wrapper over recursive function
     findFrequencyUtil It print number of
     occurrences of each element in the array
    function findFrequencyarr n
    
    
         create a empty vector to store frequencies
         and initialize it by 0 Size of vector is
         maximum value which is last value in sorted
         array plus 1
        let freq  new Arrayarrn  1  1
        
        forlet i  0 i  arrn  1  1 i
        
            freqi  0
        
        
         Fill the vector with frequency
        findFrequencyUtilarr 0 n  1 freq
 
         Print the frequencies
        for let i  0 i  arrn  1 i
            if freqi  0
                documentwriteElement   i   occurs   freqi   timesbr
    
    
     Driver Code
    let arr  1 1 1 2 3 3 5
                      5 8 8 8 9 9 10 
    let n  arrlength
    findFrequencyarr n
    
     This code is contributed by rag2127
scriptOutputElement 1 occurs 3 times
Element 2 occurs 1 times
Element 3 occurs 2 times
Element 5 occurs 2 times
Element 8 occurs 3 times
Element 9 occurs 2 times
Element 10 occurs 1 timesTime Complexity Om log N Where m is the number of distinct elements in the array of size N Since m  M a constant elements are in a limited range the time complexity of this solution is Olog NAuxiliary Space ON To store the elements in the HashMap On extra space is neededFrequency of each element in a limited range array using the input array as a HashMapIn this method we use the same array as the hash map by modifying its contentDry run of this approachInput arr   1 1 1 2 3 3 5 5 8 8 8 9 9 10 Step 1 Subtract 1 from each element of the arrayarr   0 0 0 1 2 2 4 4 7 7 7 8 8 9 Step 2 Add n to the index at which the current array element pointsfor example  when i0 arrarr0n  0 adding n to the arr0 arr0   14when i1 arrarr1n  14 adding n to arr0 arr0  28Similarly finding the modified array in the same way we will get array as  arr  42 14 28 1 30 2 4 46 35 21 7 8 8 9Step 3 Now in step 2 if you have noticed we added the n value to the index at which a particular element points to So if we have more than one time have a element that point to the same index then in that case the division of the modified number with the n gives us the frequency of the number for example at i0 arr0 42 arr0  n  3 it means that 0  appeared three times in the modified array as you can see in the arr of step 1at i1 arr1 14 arr114  1 it means that 1 appeared once in the modified array as you can see in the arr of step 1 and similarly for other values we can calculateBelow is the implementation of the above approachC C program to count number of occurrences of
 each element in the array #include iostream
#include bitsstdch
using namespace std

 It prints number of occurrences of each element in the
 array
void findFrequencyint input int n

    for int i  0 i  n i
        inputi

    for int i  0 i  n i
        inputinputi  n  n

    for int i  0 i  n i 
        if inputi  n
            cout  Element   i  1   occurs 
                  inputi  n   times  endl
         Change the element back to original value
        inputi  inputi  n  1
    


 Driver code
int main

    int arr
          1 1 1 2 3 3 5 5 8 8 8 9 9 10 
    int n  sizeofarr  sizeofarr0

     Function call
    findFrequencyarr n

    return 0


 This code is contributed by aditya kumaradiyakumar129Java Java program to count number of occurrences of each
 element in the array
import javaio
import javautil
class GFG 

     It prints number of occurrences of each element in
     the array
    static void findFrequencyint input int n
    
        for int i  0 i  n i
            inputi

        for int i  0 i  n i
            inputinputi  n  n

        for int i  0 i  n i 
            if inputi  n  0
                Systemoutprintln
                    Element   i  1   occurs 
                     inputi  n   times
             Change the element back to original value
            inputi  inputi  n  1
        
    

     Driver code
    public static void mainString args
    
        int arr
              1 1 1 2 3 3 5 5 8 8 8 9 9 10 
        int n  arrlength

         Function call
        findFrequencyarr n
    


 This code is contributed by aditya kumaradiyakumar129Python3# Javascript program to count number of occurrences of
# each element in the array

# It prints number of
# occurrences of each element in the array


def findFrequencyinput n
    for i in rangen
        inputi  1

    for i in rangen
        inputinputi  n  n

    for i in rangen
        if inputi  n
            printElement i  1 occurs inputi  n times

        # change element back to original value
        inputi  inputi  n  1


# Driver code
if __name__  __main__
    arr  1 1 1 2 3 3 5 5 8 8 8 9 9 10
    n  lenarr

    # Function call
    findFrequencyarr n

# This code is contributed by phasing17
C# C# program to count number of occurrences of each element
 in the array
using System

public class GFG 

     It prints number of occurrences of each element in
     the array
    static void findFrequencyint input int n
    
        for int i  0 i  n i
            inputi

        for int i  0 i  n i
            inputinputi  n  n

        for int i  0 i  n i 
            if inputi  n  0
                ConsoleWriteLine
                    Element   i  1   occurs 
                     inputi  n   times
             Change the element back to original value
            inputi  inputi  n  1
        
    

     Driver function
    public static void MainString args
    
        int arr
              1 1 1 2 3 3 5 5 8 8 8 9 9 10 
        int n  arrLength

         Function call
        findFrequencyarr n
    


 This code is contributed by shikhasingrajputJavascriptscript
 Javascript program to count number of occurrences of
 each element in the array 

 It prints number of
 occurrences of each element in the array
function findFrequencyinput n

    for let i  0 i  n i
        inputi

    for let i  0 i  n i
        inputinputi  n  n

    consoleloginput
    for let i  0 i  n i 
        if Mathfloorinputi  n
            documentwriteElement   i  1  
             occurs   Mathfloorinputi  n   times br
            
         Change the element back to original value
        inputi  inputi  n  1
    


 Driver function
let arr  1 1 1 2 3 3 5 5 8 8 8 9 9 10
let n  arrlength

findFrequencyarr n

 This code is contributed by Saurabh Jaiswal
scriptOutputElement 1 occurs 3 times
Element 2 occurs 1 times
Element 3 occurs 2 times
Element 5 occurs 2 times
Element 8 occurs 3 times
Element 9 occurs 2 times
Element 10 occurs 1 timesTime Complexity ONAuxiliary Space O1Frequency of each element in a limited range array using Counting Sort algorithmC#include stdioh

int frequencyCountint arr int n int p 
    int freq  callocp sizeofint
    for int i  0 i  n i 
        if arri  1  arri  p 
            freqarri1
        
    
    for int i  0 i  p i 
        printfd occurring d timesn i1 freqi
    
    return freq


int main 
    int arr  2 2 6 6 7 7 7 11
    int n  8
    int p  11
    int freq  frequencyCountarr n p
  for int i  0 i  p i 
       printfd freqi 
    
    freefreq
    return 0

C#include bitsstdch

using namespace std

vectorint frequencyCountint arr int n int p

    vectorint freqp 0
    for int i  0 i  n i 
        if arri  1  arri  p 
            freqarri  1
        
    
    for int i  0 i  p i 
        cout  i  1   occurring   freqi
               times  endl
    
    return freq


int main

    int arr   2 2 6 6 7 7 7 11 
    int n  8
    int p  11
    vectorint freq  frequencyCountarr n p
    for int i  0 i  freqsize i 
        cout  freqi   
    
    cout  endl
    return 0
Python3def frequencyCountarr n p
    freq  0  p
    for i in rangen
        if arri  1 and arri  p
            freqarri1  1
    for i in rangep
        printi1 occurring freqi times
    return freq


if __name__  __main__
    arr  2 2 6 6 7 7 7 11
    n  lenarr
    p  11
    freq  frequencyCountarr n p
    printfreq
Javaimport javautilArrays

public class Solution 
    public int frequencyCountint arr int n int p 
        int freq  new intp
        for int i  0 i  n i 
            if arri  1  arri  p 
                freqarri1
            
        
        for int i  0 i  p i 
            Systemoutprintlni1   occurring   freqi   times
        
        return freq
    

    public static void mainString args 
        int arr  2 2 6 6 7 7 7 11
        int n  8
        int p  11
        Solution solution  new Solution
        int freq  solutionfrequencyCountarr n p
        SystemoutprintlnArraystoStringfreq
    

Javascript Defining a function to count the frequency of numbers in an array
function frequencyCountarr n p 
     Creating a vector of size p with all elements initialized to 0
    let freq  new Arraypfill0
    for let i  0 i  n i 
        if arri  1  arri  p 
            freqarri  1
        
    
    for let i  0 i  p i 
        consolelogi  1   occurring   freqi   times
    
    return freq


 Defining the main function
function main 
    let arr  2 2 6 6 7 7 7 11
    let n  8
    let p  11
    let freq  frequencyCountarr n p

    consolelogfreqjoin 



 Calling the main function
mainC#using System

class Program 
    static int FrequencyCountint arr int n int p 
        int freq  new intp
        for int i  0 i  n i 
            if arri  1  arri  p 
                freqarri1
            
        
        for int i  0 i  p i 
            ConsoleWriteLine0 occurring 1 times i1 freqi
        
        return freq
    

    static void Main 
        int arr  2 2 6 6 7 7 7 11
        int n  8
        int p  11
        int freq  FrequencyCountarr n p
        for int i  0 i  p i 
            ConsoleWritefreqi   
        
    

Output1 occurring 0 times
2 occurring 2 times
3 occurring 0 times
4 occurring 0 times
5 occurring 0 times
6 occurring 2 times
7 occurring 3 times
8 occurring 0 times
9 occurring 0 times
10 occurring 0 times
11 occurring 1 timesThe time complexity of the frequencyCount function is On where n is the length of the input array arr This is because the function iterates over the entire array once to calculate the frequency of each elementThe Auxiliary space of the frequencyCount function is Op where p is the range of the elements in the input array This is because the function creates a new list freq of size p to store the frequency of each element in the range 1 to phttpsyoutubeB2hIQPoisk This article is contributed by Aditya Goel If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above RecommendedSolve DSA problems on GfG PracticeSolve Problems"
138394.0,Sorting 2D Vector in C++ | Set 1 (By row and column),,,"anshikajain26,surajrasr7277",0.0,articles/138394.txt,https://www.geeksforgeeks.org/sorting-2d-vector-in-c-set-1-by-row-and-column/,,"A 2D vector is a vector of vectors In C 2D vectors are used for creating matrices tables or any other structures dynamically Basically It is a matrix implemented with the help of vectors They are created using the vector header fileFollowing is a program to demonstrate 2D vectors in CCPP C code to demonstrate 2D vector#include iostream#include vector  for 2D vectorusing namespace std  Driver Codeint main     Initializing 2D vector vect with     values    vectorvectorint  vect  1 2 3                                 4 5 6                                 7 8 9        Displaying the 2D vector    for int i  0 i  vectsize i         for int j  0 j  vectisize j            cout  vectij           cout  endl         return 0Output1 2 3 
4 5 6 
7 8 9 Time Complexity ONM where N and M are the dimensions of the vectorSpace Complexity ONM where N and M are the dimensions of the vectorWays to Sort a 2D VectorCase 1 To sort a particular row of 2D vector This type of sorting arranges a selected row of 2D vector in ascending order This is achieved by using sort and passing iterators of 1D vector as its arguments In sort it generally takes two parameters the first one being the point of the arrayvector from where the sorting needs to begin and the second parameter being the length up to which we want the arrayvector to get sorted This function is included in algorithm header file CPP C code to demonstrate sorting of a row of 2D vector#include algorithm  for sort#include iostream#include vector  for 2D vectorusing namespace std  Driver Codeint main     Initializing 2D vector vect with     values    vectorvectorint  vect  3 5 1                                 4 8 6                                 7 2 9       Number of rows    int m  vectsize      Number of columns Assuming all rows     are of same size We can have different     sizes though like Java    int n  vect0size      Displaying the 2D vector before sorting    cout  The Matrix before sorting 1st row isn    for int i  0 i  m i         for int j  0 j  n j            cout  vectij           cout  endl          Use of sort for sorting first row    sortvect0begin vect0end      Displaying the 2D vector after sorting    cout  The Matrix after sorting 1st row isn    for int i  0 i  m i         for int j  0 j  n j            cout  vectij           cout  endl         return 0OutputThe Matrix before sorting 1st row is
3 5 1 
4 8 6 
7 2 9 
The Matrix after sorting 1st row is
1 3 5 
4 8 6 
7 2 9 Case 2 To sort the entire 2D vector on basis of a particular columnIn this type of sorting 2D vector is entirely sorted on basis of a chosen column For example if the chosen column is second the row with the smallest value in the second column becomes the first row the second smallest value in the second column becomes the second row and so on3 5 1 
4 8 6 
7 2 9After sorting this matrix by the second column we get7 2 9  Row with smallest value in second column 
3 5 1  Row with smallest value in second column 
4 8 6This is achieved by passing a third argument in sort as a call to the userdefined explicit functionCPP C code to demonstrate sorting of a 2D vector on basis of a column#include algorithm  for sort#include iostream#include vector  for 2D vectorusing namespace std  Driver function to sort the 2D vector on basis of a particular columnbool sortcolconst vectorint v1 const vectorint v2    return v11  v21  Driver Codeint main     Initializing 2D vector vect with     values    vectorvectorint  vect  3 5 1                                 4 8 6                                 7 2 9        Number of rows    int m  vectsize      Number of columns Assuming all rows     are of same size We can have different     sizes though like Java    int n  vect0size      Displaying the 2D vector before sorting    cout  The Matrix before sorting isn    for int i  0 i  m i         for int j  0 j  n j            cout  vectij           cout  endl          Use of sort for sorting on basis     of 2nd column    sortvectbegin vectend sortcol      Displaying the 2D vector after sorting    cout  The Matrix after sorting isn    for int i  0 i  m i         for int j  0 j  n j            cout  vectij           cout  endl        return 0OutputThe Matrix before sorting is
3 5 1 
4 8 6 
7 2 9 
The Matrix after sorting is
7 2 9 
3 5 1 
4 8 6 Must ReadSorting 2D Vector in C  Set 2 In descending order by row and columnSorting a Vector in CThis article is contributed by Manjeet Singh If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other Geeks Please write comments if you find anything incorrect or you want to share more information about the topic discussed above"
142692.0,Puzzle 76 | Toggling prison cell,,,"Logical Puzzles,Puzzles",0.0,articles/142692.txt,https://www.geeksforgeeks.org/puzzle-76-toggling-prison-cell/,,There was a prison consisting of 1000 cells numbered from 1 to 1000Each cell can be marked with  or sign Initially all cells were marked with  signFrom days 1 to 1000the jailor toggles marks on the cell from  to  or vice versaOn the ith day the signs on cells that are multiples of i get toggledNow in the process of verification on 1001th day all cells marked with  signs are openedCan you identify the cell numbers with  sign Solution Cell numbers are 1 4 9 16 25 36 and so onExplanationA cell gets toggled as many times as the number of divisor it has For example lets take cell number 20 it gets toggled on days 1 2 4 5 10 and 20Now we can see that  divisors come in pairs like 2012021045 We can see that total number of divisor is even But this trend is not followed if the number is a perfect squareIn perfect square  total number of divisors is odd We see that cells are initially marked with  sign and only cell numbered as perfect square gets changed to  sign as it is having odd number of divisorsThese cells are 1 4 9 16253649 and so onThis puzzle is contributed by Ankur Chaudhary Please write comments if you find anything incorrect or you want to share more information about the topic discussed above
138386.0,Linux Virtualization : Linux Containers (lxc),,,"nidhi_biet,sumitgumber28,jayes5h62",2.0,articles/138386.txt,https://www.geeksforgeeks.org/linux-virtualization-linux-containers-lxc/,"https://media.geeksforgeeks.org/wp-content/uploads/20230525123705/225.webp,https://media.geeksforgeeks.org/wp-content/uploads/211.png","Operatingsystemlevel virtualization is a server virtualization method in which an operating systems kernel allows multiple isolated userspace instances instead of just one Such instances which are sometimes called containers software containers virtualization engines VEs or jails FreeBSD jail or chroot jail may look and feel like a real server from the point of view of its owners and users The above definition sums up the broad idea about containers but to be more accurate the traditional Virtual Machines used a hypervisor that runs on top of a kernel This hypervisor provides virtualization to the applications that run on it by monitoring their resource usage and access patterns This causes a lot of overhead resulting in unnecessary loss of performance On the other hand Operatingsystemlevel virtualization works differently It uses namespaces and cgroups to restrict the applications capabilities including the use of resources This is a feature provided by the Linux kernel This has almost no overhead cgroups This method is so effective that Docker is using these containers internally to provide that isolated environment which is very useful for deploying multiple integrated systems They are even bound towards creating their own containers library Google have their own services running on containers on shared hardware Install lxc in Linux Operating SystemTo install lxc in Ubuntu  sudo aptget install lxc lxctl lxctemplatesThis package installs LXCs requirements some templates and also sets up the network structure for the containers Run lxccheckconfig to check if the kernel configuration is ready  sudo lxccheckconfig
    Kernel configuration not found at procconfiggz searching
    Kernel configuration found at bootconfig44024generic
     Namespaces 
    Namespaces enabled
    Utsname namespace enabled
    Ipc namespace enabled
    Pid namespace enabled
    User namespace enabled
    Network namespace enabled
    Multiple devpts instances enabled

     Control groups 
    Cgroup enabled
    Cgroup clone_children flag enabled
    Cgroup device enabled
    Cgroup sched enabled
    Cgroup cpu account enabled
    Cgroup memory controller enabled
    Cgroup cpuset enabled

     Misc 
    Veth pair device enabled
    Macvlan enabled
    Vlan enabled
    Bridges enabled
    Advanced netfilter enabled
    CONFIG_NF_NAT_IPV4 enabled
    CONFIG_NF_NAT_IPV6 enabled
    CONFIG_IP_NF_TARGET_MASQUERADE enabled
    CONFIG_IP6_NF_TARGET_MASQUERADE enabled
    CONFIG_NETFILTER_XT_TARGET_CHECKSUM enabled
    FUSE for use with lxcfs enabled

     CheckpointRestore 
    checkpoint restore enabled
    CONFIG_FHANDLE enabled
    CONFIG_EVENTFD enabled
    CONFIG_EPOLL enabled
    CONFIG_UNIX_DIAG enabled
    CONFIG_INET_DIAG enabled
    CONFIG_PACKET_DIAG enabled
    CONFIG_NETLINK_DIAG enabled
    File capabilities enabledNote Before booting a new kernel you can check its configuration usage CONFIGpathtoconfig usrbinlxccheckconfig You should also see the output something similar to the above lxc provides a lot of ready templates which are really helpful for fast deployment  ls l usrsharelxctemplates
    total 404
    rwxrxrx 1 root root 12973 May 18 1448 lxcalpine
    rwxrxrx 1 root root 13713 May 18 1448 lxcaltlinux
    rwxrxrx 1 root root 11090 May 18 1448 lxcarchlinux
    rwxrxrx 1 root root 12159 May 18 1448 lxcbusybox
    rwxrxrx 1 root root 29503 May 18 1448 lxccentos
    rwxrxrx 1 root root 10374 May 18 1448 lxccirros
    rwxrxrx 1 root root 19732 May 18 1448 lxcdebian
    rwxrxrx 1 root root 17890 May 18 1448 lxcdownload
    rwxrxrx 1 root root 49600 May 18 1448 lxcfedora
    rwxrxrx 1 root root 28384 May 18 1448 lxcgentoo
    rwxrxrx 1 root root 13868 May 18 1448 lxcopenmandriva
    rwxrxrx 1 root root 15932 May 18 1448 lxcopensuse
    rwxrxrx 1 root root 41720 May 18 1448 lxcoracle
    rwxrxrx 1 root root 11205 May 18 1448 lxcplamo
    rwxrxrx 1 root root 19250 May 18 1448 lxcslackware
    rwxrxrx 1 root root 26862 May 18 1448 lxcsparclinux
    rwxrxrx 1 root root  6862 May 18 1448 lxcsshd
    rwxrxrx 1 root root 25602 May 18 1448 lxcubuntu
    rwxrxrx 1 root root 11439 May 18 1448 lxcubuntucloudWell start by creating a new container with the name my_container with ubuntu template This will take some time and finish creating a container for you Yes Its that simple Once its completed the last few lines show the password for the root user of the container It would look something similar to this   sudo lxccreate n my_container t ubuntu
    
    
    ##
    # The default user is ubuntu with password ubuntu
    # Use the sudo command to run tasks as root in the container
    ##We can check the status of container using lxcls This will show the container to be in a stopped state   sudo lxcls fancy
    NAME            STATE    IPV4  IPV6  AUTOSTART
    
    my_container    STOPPED            NONow to start the container run lxcstart The d argument creates a daemon   sudo lxcstart n my_container dCheck the status of container using lxcls to verify its running We can access the console using lxcconsole Use the credentials we received above to get the console access   sudo lxcconsole n my_containerAfter logging in run the following command on the container   topAnd on the hostpc run the following command to see the list of running processes   ps auxfand somewhere youll find a process tree that looks similar to this  It would be surprising but all the processes on the container are just simple processes on the host pc The important part is that all are isolated and monitored by kernel Hence you can think of these as simple processes on the host PC and you can even kill them only if you have sufficient privileges You can exit the console and return to the host by typing CtrlA followed by Q To get more info about the running container use   sudo lxcinfo n my_containerYou can access the root filesystem of this container directly from the host machine by accessing You will need root permission to do so   sudo su
 cd varliblxcmy_containerrootfsThats it Now this is like a brandnew operating system You can run any service on this container Think of containers as separate operating systems where you can run anything you want The only thing that makes it special is that all containers run on the same hardware So practically companiesinstitutions buy a heavy shared machine then deploy containers with resource limits according to the multiple services they want This makes it scalable and easier to manage To stop the container run   sudo lxcstop n my_containerTo delete the container use  sudo lxcdestroy n my_containerNOTE lxc provides a wrapper and easy to use API to use the kernel features It is not equivalent to containers in any sense Read the documentation to get more details on the working of containers There are a lot of commands that are really helpful and make it easier to set up containers"
159648.0,Python Program for Odd-Even Sort / Brick Sort,,,"amankr0211,adityasha4x71",0.0,articles/159648.txt,https://www.geeksforgeeks.org/python-program-for-odd-even-sort-brick-sort/,,This is basically a variation of bubblesort This algorithm is divided into two phases Odd and Even Phase The algorithm runs until the array elements are sorted and in each iteration two phases occurs Odd and Even Phases In the odd phase we perform a bubble sort on odd indexed elements and in the even phase we perform a bubble sort on even indexed elements Python3# Python Program to implement# OddEven  Brick Sort def oddEvenSortarr n    # Initially array is unsorted    isSorted  0    while isSorted  0        isSorted  1        temp  0        for i in range1 n1 2            if arri  arri1                arri arri1  arri1 arri                isSorted  0                         for i in range0 n1 2            if arri  arri1                arri arri1  arri1 arri                isSorted  0         return  arr  34 2 10 9n  lenarr oddEvenSortarr nfor i in range0 n    printarri end       # Code Contribute by Mohit Gupta_OMG 0_oOutput 9 2 10 34 Time Complexity On2Auxiliary Space O1Method 2 Using the sorted function In this method the sorted function is used to sort oddindexed and evenindexed elements of the array separately and then assign them back to the original array using slicing This replaces the first for loop in the original code The rest of the code remains the sameBelow is the code for the above approach Python3def oddEvenSortarr n    isSorted  0    while isSorted  0        isSorted  1        arr12 arr22  sortedarr12 sortedarr22                 for i in range0 n1 2            if arri  arri1                arri arri1  arri1 arri                isSorted  0                     return arr  34 2 10 9n  lenarr oddEvenSortarr nfor i in range0 n    printarri end  Output9 10 2 34 Time Complexity On2Auxiliary Space O1Please refer complete article on OddEven Sort  Brick Sort for more details
138379.0,Sort Vector of Pairs in ascending order in C++,,,susobhanakhuli,0.0,articles/138379.txt,https://www.geeksforgeeks.org/sort-vector-of-pairs-in-ascending-order-in-c/,,"What is Vector of Pairs A pair is a container which stores two values mapped to each other and a vector containing multiple number of such pairs is called a vector of pairs CPP C program to demonstrate vector of pairs#includebitsstdchusing namespace std int main    declaring vector of pairs    vector pair intint  vect      initialising 1st and 2nd element of     pairs with array values    int arr  10 20 5 40     int arr1  30 60 20 50    int n  sizeofarrsizeofarr0      Entering values in vector of pairs    for int i0 in i        vectpush_back make_pairarriarr1i       Printing the vector    for int i0 in i             first and second are used to access         1st and 2nd element of pair respectively        cout  vectifirst                 vectisecond  endl         return 0Output10 30
20 60
5 20
40 50Time Complexity On where N is the size of the VectorAuxiliary Space O1Case 1  Sorting the vector elements on the basis of first element of pairs in ascending order This type of sorting can be achieved using simple  sort  function By default the sort function sorts the vector elements on basis of first element of pairs CPP C program to demonstrate sorting in vector of pair according to 1st element of pair#includebitsstdchusing namespace std int main     Declaring vector of pairs    vector pair intint  vect      Initializing 1st and 2nd element of     pairs with array values    int arr  10 20 5 40     int arr1  30 60 20 50    int n  sizeofarrsizeofarr0      Entering values in vector of pairs    for int i0 in i        vectpush_back make_pairarriarr1i       Printing the original vectorbefore sort    cout  The vector before sort operation isn     for int i0 in i             first and second are used to access         1st and 2nd element of pair respectively        cout  vectifirst                 vectisecond  endl           Using simple sort function to sort    sortvectbegin vectend       Printing the sorted vectorafter using sort    cout  The vector after sort operation isn     for int i0 in i             first and second are used to access         1st and 2nd element of pair respectively        cout  vectifirst                 vectisecond  endl         return 0OutputThe vector before applying sort operation is
10 30
20 60
5 20
40 50
The vector after applying sort operation is
5 20
10 30
20 60
40 50Time Complexity ONlogN where N is the size of the sorted vectorAuxiliary Space O1Case 2  Sorting the vector elements on the basis of second element of pairs in ascending order There are instances when we require to sort the elements of vector on the basis of second elements of pair For that we modify the sort function and we pass a third argument a call to an user defined explicit function in the sort function CPP C program to demonstrate sorting in vector of pair according to 2nd element of pair#includebitsstdchusing namespace std  Driver function to sort the vector elements by second element of pairsbool sortbysecconst pairintint a              const pairintint b    return asecond  bsecond int main     declaring vector of pairs    vector pair int int  vect      Initialising 1st and 2nd element of pairs     with array values    int arr  10 20 5 40     int arr1  30 60 20 50    int n  sizeofarrsizeofarr0      Entering values in vector of pairs    for int i0 in i        vectpush_back make_pairarriarr1i       Printing the original vectorbefore sort    cout  The vector before sort operation isn     for int i0 in i             first and second are used to access         1st and 2nd element of pair respectively        cout  vectifirst                 vectisecond  endl           Using sort function to sort by 2nd element     of pair    sortvectbegin vectend sortbysec      Printing the sorted vectorafter using sort    cout  The vector after sort operation isn     for int i0 in i             first and second are used to access         1st and 2nd element of pair respectively        cout  vectifirst                 vectisecond  endl        return 0Output 
The vector before applying sort operation is
10 30
20 60
5 20
40 50
The vector after applying sort operation is
5 20
10 30
40 50
20 60Time Complexity ONlogN where N is the size of the sorted vectorAuxiliary Space O1Sorting Vector of Pairs in C  Set 2 Sort in descending order by first and second   This article is contributed by Manjeet Singh If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other Geeks Please write comments if you find anything incorrect or you want to share more information about the topic discussed aboveRecommendedSolve DSA problems on GfG PracticeSolve Problems"
138359.0,"std::tuple, std::pair | Returning multiple values from a function using Tuple and Pair in C++",,,tanwarsinghvaibhav,0.0,articles/138359.txt,https://www.geeksforgeeks.org/returning-multiple-values-from-a-function-using-tuple-and-pair-in-c/,,"There can be some instances where you need to return multiple values maybe of different data types  while solving a problem One method to do the same is by using pointers structures or global variables already discussed hereThere is another interesting method to do the same without using the above methods  using tuples for returning multiple values  and pairs for two valuesWe can declare the function with return type as pair or tuple whichever is required and can pack the values to be returned and return the packed set of values The returned values can be unpacked in the calling functionTupleA tuple is an object capable to hold a collection of elements where each element can be of a different typeClass template stdtuple is a fixedsize collection of heterogeneous valuesPairThis class couples together a pair of values which may be of different typesA pair is a specific case of a stdtuple with two elementsNote  Tuple can also be used to return two values instead of using pair #includebitsstdchusing namespace std   A Method that returns multiple values using tuple in Ctupleint int char fooint n1 int n2     Packing values to return a tuple    return make_tuplen2 n1 a                A Method returns a pair of values using pairstdpairint int foo1int num1 int num2     Packing two values to return a pair     return stdmake_pairnum2 num1              int main    int ab    char cc           Unpack the elements returned by foo    tiea b cc  foo5 10                 Storing  returned values in a pair     pairint int p  foo152            cout  Values returned by tuple     cout  a     b     cc  endl          cout  Values returned by Pair     cout  pfirst     psecond    return 0OutputValues returned by tuple 10 5 a
Values returned by Pair 2 5
This article is contributed by Mayank Rawat If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above"
138360.0,Sleep Sort – The King of Laziness / Sorting while Sleeping,,,"DSA,Sorting",1.0,articles/138360.txt,https://www.geeksforgeeks.org/sleep-sort-king-laziness-sorting-sleeping/,https://media.geeksforgeeks.org/wp-content/cdn-uploads/SleepSort.png,"In this algorithm we create different threads for each of the elements in the input array and then each thread sleeps for an amount of time which is proportional to the value of corresponding array elementHence the thread having the least amount of sleeping time wakes up first and the number gets printed and then the second least element and so on The largest element wakes up after a long time and then the element gets printed at the last Thus the output is a sorted oneAll this multithreading process happens in background and at the core of the OS We do not get to know anything about whats happening in the background hence this is a mysterious sorting algorithmExample  Lets assume for convenience we have a computer thats so slow it takes 3 seconds to work through each element
INPUT 8 2 9 

3s sleep 8
6s sleep 2
8s 2 2 wakes up so print it
9s sleep 9
11s 8 8 wakes up so print it
18s 9 9 wakes up so print it

OUTPUT 2 8 9ImplementationTo implement sleep sort we need multithreading functions such as _beginthread and WaitForMultipleObjects Hence we need to include windowsh to use these functions This wont compile on Online IDE We must run it in your PC Note this code is for WINDOWS and not for LINUXTo perform a sleep sort we need to create threads for each of the value in the input array We do this using the function _beginthreadIn each of the threads we assign two instructions1 Sleep  Sleep this thread till arri milliseconds where arri is the array element which this thread is associated to We do this using Sleep function The Sleepn function suspends the activity associated with this thread till n milliseconds Hence if we write Sleep1000 then it means that the thread will sleep for 1 second 1000 milliseconds  1 second2 Print  When the thread wakes up after the sleep then print the array element  arri which this thread is associated toAfter creating the threads we process these threads We do this using WaitForMultipleObjects C implementation of Sleep Sort#include stdioh#include windowsh#include processh   This is the instruction set of a thread So in these threads we sleep for a particular amount of time and then when it wakes up the number is printed outvoid routinevoid a    int n  int  a  typecasting from void to int       Sleeping time is proportional to the number     More precisely this thread sleep for n milliseconds    Sleepn       After the sleep print the number    printfd  n   A function that performs sleep sort_beginthread is a C runtime library call that creates a newthread for all the integers in the array and returns thatthread  Each of the thread sleeps for a time proportional to thatinteger and print it after waking  We pass three parameters to _beginthread 1 start_address  start address of the routinefunction                     which creates a new thread2 stack_size  Stack Size of the new thread which is 03 arglist  Address of the argument to be passed  The return value of _beginthread function is a handle to thethread which is created So we must accept is using the datatypeHANDLE which is included in windowsh headerHANDLE datatype is used to represent an eventthreadprocess etcSo HANDLE datatype is used to define a threadWe store the threads in an array  threads which is declaredusing HANDLE datatype  WaitForMultipleObjects is a function that processes the threadsand has four arguments1 no_of_threads  Number of threads to be processed2 array_of_threads  This is the array of threads which should be                        processed This array must be of the type                        HANDLE3 TRUE or FALSE  We pass TRUE if we want all the threads in the                     array to be processed4 time_limit  The threads will be processed until this time limit                  is crossed So if we pass a 0 then no threads will                  be processed otherwise if we pass an INFINITE then                  the program will stop only when all the threads                  are processed We can put a cap on the execution                  time of the program by passing the desired time                  limit void sleepSortint arr int n     An array of threads one for each of the elements     in the input array    HANDLE threadsn       Create the threads for each of the input array elements    for int i  0 i  n i        threadsi  HANDLE_beginthreadroutine 0  arri       Process these threads    WaitForMultipleObjectsn threads TRUE INFINITE    return   Driver program to test above functionsint main     Doesnt work for negative numbers    int arr  34 23 122 9    int n  sizeofarr  sizeofarr0      sleepSort arr n      return0Limitations1 This algorithm wont work for negative numbers as a thread cannot sleep for a negative amount of time2 Since this algorithm depends on the input elements so a huge number in the input array causes this algorithm to slow down drastically as the thread associated with that number has to sleep for a long time So even if the input array element contains only 2 elements like 1 100000000 then also we have to wait for a much longer duration to sort3 This algorithm doesnt produce a correct sorted output every time This generally happens when there is a very small number to the left of a very large number in the input arrayFor example  34 23 1 12253 9The output after sleep sorting is 9 1 23 34 1223A wrong output also occurs when the input array is reverse sorted initially like 10 9 8 7 6 5The reason for such an unexpected output is because some time is taken between scanning through each element as well as some other OS operations like inserting each threads in a priority queue for scheduling We cannot simply ignore the time taken by all these thingsWe describe this using the below example
Lets assume for convenience we have a computer thats
so slow it takes 3 seconds to work through each element 
INPUT 10 9 8 7 6 5

3s sleep 10
6s sleep 9
9s sleep 8
12s sleep 7
13s 10 10 wakes up so print it
15s sleep 6
15s 9 9 wakes up so print it
17s 8 8 wakes up so print it
18s sleep 5
19s 7 7 wakes up so print it
21s 6 6 wakes up so print it
23s 5 5 wakes up so print it

OUTPUT 10 9 8 7 6 5 The above output is just an exampleObviously modernday computers computer are not so slow to take 3 seconds to scan through each elementIn reality running sleep sort on a modern computer on the above array gives the output  9 5 7 10 8 6How to fix this 1 We can fix this by repeatedly sleep sorting on the new output until the output becomes sorted Every time it will sort the elements more accurately2 The wrong output as discussed earlier happens due to the time taken by other OS works and scanning through each elementIn our program we have used the function Sleeparri which means that each thread associated with the array elements sleep for arri milliseconds Since milliseconds is a very small quantity and other OS tasks can take more time than arri milliseconds which ultimately can cause an error in sleep sorting Increasing the sleeping time by even 10 times can give a sorted output as the OS tasks will finish all its task in between this much sleep hence not producing any errorsHad we used Sleep10arri instead of just Sleeparri then we will certainly get a more precise output than the latter one For example the input array  10 9 8 7 6 5 will give the correct sorted output  5 6 7 8 9 10 if we use Sleep10arri instead of just Sleeparri However it is still possible that Sleep10arri will give wrong results for some test cases To make it more precise increase the sleep time more  say something like  Sleep20arriHence the bottom line is that more the sleep time more accurate the results are Sounds interesting eh  But again that would increase the runtime of this algorithmExercise to the readers1 The above algorithm tries to sort it in ascending order Can you sort an input array in descending order using sleep sort Think upon it2 Is it a comparison based sorting algorithm  How many comparisons this algorithm makes  Answer  No it makes zero comparisons 3 Can we do sleeping sort without using windowsh header and without using Sleep functionOne idea can be to create a priority queue where the elements are arranged according to the time left before waking up and getting printed The element at the front of the priority queue will be the first one to get waked up However the implementation doesnt looks easy Think on itTime ComplexityAlthough there are many conflicting opinions about the time complexity of sleep sort but we can approximate the time complexity using the below reasoningSince Sleep function and creating multiple threads is done internally by the OS using a priority queue used for scheduling purposes Hence inserting all the array elements in the priority queue takes ONlog N time Also the output is obtained only when all the threads are processed ie when all the elements wakes up Since it takes Oarri time to wake the ith array elements thread So it will take a maximum of Omaxinput for the largest element of the array to wake up Thus the overall time complexity can be assumed as ONlogN  maxinputwhere N  number of elements in the input array and input  input array elementsAuxiliary SpaceAll the things are done by the internal priority queue of the OS Hence auxiliary space can be ignoredConclusionSleep Sort is related to Operating System more than any other sorting algorithm This sorting algorithm is a perfect demonstration of multithreading and scheduling done by OSThe phrase Sorting while Sleeping itself sounds very unique Overall it is a fun lazy weird algorithm But as rightly said by someone If it works then it is not lazyThis article is contributed by Rachit Belwariar If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed aboveRecommendedSolve DSA problems on GfG PracticeSolve Problems"
138349.0,Iterative function to check if two trees are identical,,,"prerna saini,PranchalKatiyar,princiraj1992,nobody_cares,nidhi_biet,learningrate,rrrtnx,rajpootveerendrasingh36,noviced3vq6,am8254s3a,mishraaabcf9",0.0,articles/138349.txt,https://www.geeksforgeeks.org/iterative-function-check-two-trees-identical/,,"Two trees are identical when they have same data and arrangement of data is also same To identify if two trees are identical we need to traverse both trees simultaneously and while traversing we need to compare data and children of the trees Examples Input  Roots of below trees    10           10               5     6       5 Output  falseInput  Roots of below trees    10            10                  5     6       5     6Output  trueRecommended Please try your approach on IDE first before moving on to the solutionWe have discussed recursive solution here In this article iterative solution is discussed The idea is to use level order traversal We traverse both trees simultaneously and compare the data whenever we dequeue and item from queue Below is the implementation of the idea C Iterative C program to check if two #include bitsstdchusing namespace std  A Binary Tree Nodestruct Node    int data    struct Node left right  Iterative method to find height of Binary Treebool areIdenticalNode root1 Node root2     Return true if both trees are empty    if root1NULL   root2NULL return true      Return false if one is empty and other is not    if root1  NULL return false    if root2  NULL return false          Create an empty queues for simultaneous traversals    queueNode  q1 q2      Enqueue Roots of trees in respective queues    q1pushroot1    q2pushroot2     while q1empty  q2empty             Get front nodes and compare them        Node n1  q1front        Node n2  q2front         if n1data  n2data           return false          Remove front nodes from queues        q1pop q2pop          Enqueue left children of both nodes         if n1left  n2left                    q1pushn1left            q2pushn2left                  If one left child is empty and other is not        else if n1left  n2left            return false          Right child code Similar to left child code        if n1right  n2right                    q1pushn1right            q2pushn2right                else if n1right  n2right            return false         return true  Utility function to create a new tree nodeNode newNodeint data    Node temp  new Node    tempdata  data    templeft  tempright  NULL    return temp  Driver program to test above functionsint main    Node root1  newNode1    root1left  newNode2    root1right  newNode3    root1leftleft  newNode4    root1leftright  newNode5     Node root2  newNode1    root2left  newNode2    root2right  newNode3    root2leftleft  newNode4    root2leftright  newNode5     areIdenticalroot1 root2 cout  Yes                               cout  No    return 0Java Iterative Java program to check if two import javautilclass GfG   A Binary Tree Nodestatic class Node    int data    Node left right  Iterative method to find height of Binary Treestatic boolean areIdenticalNode root1 Node root2     Return true if both trees are empty    if root1  null  root2  null  return true      Return false if one is empty and other is not    if root1  null  root2  null return false      Create an empty queues for simultaneous traversals    QueueNode  q1  new LinkedListNode     QueueNode  q2  new LinkedListNode       Enqueue Roots of trees in respective queues    q1addroot1    q2addroot2     while q1isEmpty  q2isEmpty             Get front nodes and compare them        Node n1  q1peek        Node n2  q2peek         if n1data  n2data        return false          Remove front nodes from queues        q1remove        q2remove          Enqueue left children of both nodes         if n1left  null  n2left  null                    q1addn1left            q2addn2left                  If one left child is empty and other is not        else if n1left  null  n2left  null            return false          Right child code Similar to left child code        if n1right  null  n2right  null                    q1addn1right            q2addn2right                else if n1right  null  n2right  null            return false         return true  Utility function to create a new tree nodestatic Node newNodeint data    Node temp  new Node    tempdata  data    templeft  null    tempright  null    return temp  Driver program to test above functionspublic static void mainString args    Node root1  newNode1    root1left  newNode2    root1right  newNode3    root1leftleft  newNode4    root1leftright  newNode5     Node root2  newNode1    root2left  newNode2    root2right  newNode3    root2leftleft  newNode4    root2leftright  newNode5     ifareIdenticalroot1 root2  true    SystemoutprintlnYes    else    SystemoutprintlnNoPython3# Iterative Python3 program to check# if two trees are identicalfrom queue import Queue # Utility function to create a# new tree nodeclass newNode    def __init__self data        selfdata  data        selfleft  selfright  None # Iterative method to find height of# Binary Treedef areIdenticalroot1 root2         # Return true if both trees are empty    if root1 and root2        return True     # Return false if one is empty and    # other is not    if root1 or root2        return False     # Create an empty queues for    # simultaneous traversals    q1  Queue    q2  Queue     # Enqueue Roots of trees in    # respective queues    q1putroot1    q2putroot2     while not q1empty and not q2empty                 # Get front nodes and compare them        n1  q1queue0        n2  q2queue0         if n1data  n2data            return False         # Remove front nodes from queues        q1get        q2get         # Enqueue left children of both nodes        if n1left and n2left            q1putn1left            q2putn2left         # If one left child is empty and        # other is not        elif n1left or n2left            return False         # Right child code Similar to        # left child code        if n1right and n2right            q1putn1right            q2putn2right        elif n1right or n2right            return False     return True # Driver Codeif __name__  __main__    root1  newNode1    root1left  newNode2    root1right  newNode3    root1leftleft  newNode4    root1leftright  newNode5     root2  newNode1    root2left  newNode2    root2right  newNode3    root2leftleft  newNode4    root2leftright  newNode5     if areIdenticalroot1 root2        printYes    else        printNo         # This code is contributed by PranchalKC# Iterative C# program to check if two using Systemusing SystemCollectionsGeneric class GfG  A Binary Tree Nodeclass Node    public int data    public Node left right  Iterative method to find height of Binary Treestatic bool areIdenticalNode root1 Node root2     Return true if both trees are empty    if root1  null  root2  null        return true      Return false if one is empty and other is not    if root1  null  root2  null        return false      Create an empty queues for     simultaneous traversals    QueueNode q1  new QueueNode     QueueNode q2  new QueueNode       Enqueue Roots of trees in respective queues    q1Enqueueroot1    q2Enqueueroot2     while q1Count  0  q2Count  0             Get front nodes and compare them        Node n1  q1Peek        Node n2  q2Peek         if n1data  n2data        return false          Remove front nodes from queues        q1Dequeue        q2Dequeue          Enqueue left children of both nodes         if n1left  null  n2left  null                    q1Enqueuen1left            q2Enqueuen2left                  If one left child is empty and other is not        else if n1left  null  n2left  null            return false          Right child code Similar to left child code        if n1right  null  n2right  null                    q1Enqueuen1right            q2Enqueuen2right                else if n1right  null  n2right  null            return false         return true  Utility function to create a new tree nodestatic Node newNodeint data    Node temp  new Node    tempdata  data    templeft  null    tempright  null    return temp  Driver codepublic static void MainString args    Node root1  newNode1    root1left  newNode2    root1right  newNode3    root1leftleft  newNode4    root1leftright  newNode5     Node root2  newNode1    root2left  newNode2    root2right  newNode3    root2leftleft  newNode4    root2leftright  newNode5     ifareIdenticalroot1 root2  true    ConsoleWriteLineYes    else    ConsoleWriteLineNo  This code is contributed by PrinciRaj1992Javascriptscript   Iterative Javascript program to check if two   A Binary Tree Nodeclass Node  constructor      thisdata  0    thisleft  null    thisright  null    Iterative method to find height of Binary Treefunction areIdenticalroot1 root2     Return true if both trees are empty    if root1  null  root2  null        return true      Return false if one is empty and other is not    if root1  null  root2  null        return false      Create an empty queues for     simultaneous traversals    var q1      var q2        push Roots of trees in respective queues    q1pushroot1    q2pushroot2     while q1length  0  q2length  0             Get front nodes and compare them        var n1  q10        var n2  q20         if n1data  n2data        return false          Remove front nodes from queues        q1shift        q2shift          push left children of both nodes         if n1left  null  n2left  null                    q1pushn1left            q2pushn2left                  If one left child is empty and other is not        else if n1left  null  n2left  null            return false          Right child code Similar to left child code        if n1right  null  n2right  null                    q1pushn1right            q2pushn2right                else if n1right  null  n2right  null            return false         return true  Utility function to create a new tree nodefunction newNodedata    var temp  new Node    tempdata  data    templeft  null    tempright  null    return temp  Driver codevar root1  newNode1root1left  newNode2root1right  newNode3root1leftleft  newNode4root1leftright  newNode5var root2  newNode1root2left  newNode2root2right  newNode3root2leftleft  newNode4root2leftright  newNode5ifareIdenticalroot1 root2  true  documentwriteYeselse  documentwriteNo scriptOutputYes




Time complexity of above solution is On  m where m and n are number of nodes in two treesSpace complexity On space for queue Using Iterative PostOrder Traversal and Two StacksThe basic idea behind this approach is to traverse both trees in a postorder fashion iteratively and compare their nodes one by one We can use two stacks to do this We start with pushing the root nodes of both trees onto their respective stacks Follow the steps to implement the ideawe repeat the following steps until both stacks are emptyPop the top node from each stackCompare the popped nodes If they are not identical return falsePush the right subtree of both nodes if they exist onto their respective stacksPush the left subtree of both nodes if they exist onto their respective stacksBelow is the implementation of the above approachC C code to implement Iterative Postorder Traversal using two stacks#include iostream#include stackusing namespace std  A binary tree node struct Node     int data    Node left right    Nodeint x            data  x        left  right  NULL      Iterative Postorder Traversal to check if two binary  trees are identical bool isIdenticalNode r1 Node r2    stackNode stack1 stack2      loop until both trees are completely traversed    while r1  NULL  stack1empty  r2  NULL            stack2empty          push all left nodes of first tree in stack1        while r1  NULL             stack1pushr1            r1  r1left                 push all left nodes of second tree in stack2        while r2  NULL             stack2pushr2            r2  r2left                 if size of both stacks is different trees are         not identical        if stack1size  stack2size            return false         pop one node from each stack and compare their         data        r1  stack1top        stack1pop        r2  stack2top        stack2pop        if r1data  r2data            return false         move to the right of the popped nodes        r1  r1right        r2  r2right         both trees are identical    return true  Driver code int main     Construct the first tree    Node root1  new Node1    root1left  new Node2    root1right  new Node3    root1leftleft  new Node4    root1leftright  new Node5      Construct the second tree    Node root2  new Node1    root2left  new Node2    root2right  new Node3    root2leftleft  new Node4    root2leftright  new Node5      Check if the trees are identical    if isIdenticalroot1 root2        cout  Both trees are identical    else        cout  Both trees are not identical     return 0 This code is contributed by Veerendra_Singh_RajpootJavaimport javautilStack  A Java program to implement Iterative Postorder Traversal using two stacks  A binary tree nodeclass Node     int data    Node left right          Constructor    Nodeint x         data  x        left  right  null     public class IdenticalBinaryTrees      Iterative Postorder Traversal to check if two binary trees are identical    static boolean isIdenticalNode r1 Node r2         StackNode stack1  new Stack        StackNode stack2  new Stack                  loop until both trees are completely traversed        while r1  null  stack1empty  r2  null  stack2empty              push all left nodes of the first tree in stack1            while r1  null                 stack1pushr1                r1  r1left                         push all left nodes of the second tree in stack2            while r2  null                 stack2pushr2                r2  r2left                         if the size of both stacks is different trees are not identical            if stack1size  stack2size                return false             pop one node from each stack and compare their data            r1  stack1pop            r2  stack2pop            if r1data  r2data                return false             move to the right of the popped nodes            r1  r1right            r2  r2right                 both trees are identical        return true    Driver code    public static void mainString args          Construct the first tree        Node root1  new Node1        root1left  new Node2        root1right  new Node3        root1leftleft  new Node4        root1leftright  new Node5          Construct the second tree        Node root2  new Node1        root2left  new Node2        root2right  new Node3        root2leftleft  new Node4        root2leftright  new Node5          Check if the trees are identical        if isIdenticalroot1 root2            SystemoutprintlnBoth trees are identical        else            SystemoutprintlnBoth trees are not identical    Python3# Python code to implement Iterative Postorder Traversal using# two stacks # A class representing a node in the binary treeclass Node    def __init__self data        selfdata  data        selfleft  None        selfright  None # Iterative Postorder Traversal to check if two binary# trees are identicaldef isIdenticalr1 r2    stack1      stack2       # Loop until both trees are completely traversed    while r1 or stack1 or r2 or stack2        # Push all left nodes of the first tree in stack1        while r1            stack1appendr1            r1  r1left         # Push all left nodes of the second tree in stack2        while r2            stack2appendr2            r2  r2left         # If size of both stacks is different trees are not identical        if lenstack1  lenstack2            return False         # Pop one node from each stack and compare their data        r1  stack1pop        r2  stack2pop         if r1data  r2data            return False         # Move to the right of the popped nodes        r1  r1right        r2  r2right     # Both trees are identical    return True # Driver codeif __name__  __main__    # Construct the first tree    root1  Node1    root1left  Node2    root1right  Node3    root1leftleft  Node4    root1leftright  Node5     # Construct the second tree    root2  Node1    root2left  Node2    root2right  Node3    root2leftleft  Node4    root2leftright  Node5     # Check if the trees are identical    if isIdenticalroot1 root2        printBoth trees are identical    else        printBoth trees are not identicalOutputBoth trees are identical




Time Complexity ON  The time complexity of the isIdentical function is On where n is the total number of nodes in the trees This is because we visit each node exactly once and perform a constant amount of work at each nodeAuxiliary Space OH  The space complexity of the isIdentical function is Oh where h is the maximum height of the two trees This is because we use two stacks to keep track of the nodes in the two treesThis article is contributed by Ankur Lathiya If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above"
138348.0,Cocktail Sort,,,"Sam007,simranarora5sos,sweetyty,simmytarika5,decode2207,guptavivek0503,yashagarwal2852002,abhayg0701,purisaurabh2885,avinashrayz28,jaykush9161",0.0,articles/138348.txt,https://www.geeksforgeeks.org/cocktail-sort/,,"Cocktail Sort is a variation of Bubble sort The Bubble sort algorithm always traverses elements from left and moves the largest element to its correct position in the first iteration and secondlargest in the second iteration and so on Cocktail Sort traverses through a given array in both directions alternatively Cocktail sort does not go through the unnecessary iteration making it efficient for large arraysCocktail sorts break down barriers that limit bubble sorts from being efficient enough on large arrays by not allowing them to go through unnecessary iterations on one specific region or cluster before moving onto another section of an arrayAlgorithm Each iteration of the algorithm is broken up into 2 stages The first stage loops through the array from left to right just like the Bubble Sort During the loop adjacent items are compared and if the value on the left is greater than the value on the right then values are swapped At the end of the first iteration the largest number will reside at the end of the arrayThe second stage loops through the array in opposite direction starting from the item just before the most recently sorted item and moving back to the start of the array Here also adjacent items are compared and are swapped if requiredExample  Let us consider an example array 5 1 4 2 8 0 2First Forward Pass 5 1 4 2 8 0 2  1 5 4 2 8 0 2 Swap since 5  1 1 5 4 2 8 0 2  1 4 5 2 8 0 2 Swap since 5  4 1 4 5 2 8 0 2  1 4 2 5 8 0 2 Swap since 5  2 1 4 2 5 8 0 2  1 4 2 5 8 0 2 1 4 2 5 8 0 2  1 4 2 5 0 8 2 Swap since 8  0 1 4 2 5 0 8 2  1 4 2 5 0 2 8 Swap since 8  2After the first forward pass the greatest element of the array will be present at the last index of the arrayFirst Backward Pass 1 4 2 5 0 2 8  1 4 2 5 0 2 8 1 4 2 5 0 2 8  1 4 2 0 5 2 8 Swap since 5  0 1 4 2 0 5 2 8  1 4 0 2 5 2 8 Swap since 2  0 1 4 0 2 5 2 8  1 0 4 2 5 2 8 Swap since 4  0 1 0 4 2 5 2 8  0 1 4 2 5 2 8 Swap since 1  0After the first backward pass the smallest element of the array will be present at the first index of the arraySecond Forward Pass 0 1 4 2 5 2 8  0 1 4 2 5 2 8 0 1 4 2 5 2 8  0 1 2 4 5 2 8 Swap since 4  2 0 1 2 4 5 2 8  0 1 2 4 5 2 8 0 1 2 4 5 2 8  0 1 2 4 2 5 8 Swap since 5  2Second Backward Pass 0 1 2 4 2 5 8  0 1 2 2 4 5 8 Swap since 4  2Now the array is already sorted but our algorithm doesnt know if it is completed The algorithm needs to complete this whole pass without any swap to know it is sorted 0 1 2 2 4 5 8  0 1 2 2 4 5 8 0 1 2 2 4 5 8  0 1 2 2 4 5 8Below is the implementation of the above algorithm C C implementation of Cocktail Sort#include bitsstdchusing namespace std  Sorts array a0n1 using Cocktail sortvoid CocktailSortint a int n    bool swapped  true    int start  0    int end  n  1     while swapped          reset the swapped flag on entering         the loop because it might be true from         a previous iteration        swapped  false          loop from left to right same as         the bubble sort        for int i  start i  end i             if ai  ai  1                 swapai ai  1                swapped  true                              if nothing moved then array is sorted        if swapped            break          otherwise reset the swapped flag so that it         can be used in the next stage        swapped  false          move the end point back by one because         item at the end is in its rightful spot        end          from right to left doing the         same comparison as in the previous stage        for int i  end  1 i  start i             if ai  ai  1                 swapai ai  1                swapped  true                              increase the starting point because         the last stage would have moved the next         smallest number to its rightful spot        start      Prints the array void printArrayint a int n    for int i  0 i  n i        printfd  ai    printfn  Driver codeint main    int a   5 1 4 2 8 0 2     int n  sizeofa  sizeofa0    CocktailSorta n    printfSorted array n    printArraya n    return 0Java Java program for implementation of Cocktail Sortpublic class CocktailSort    void cocktailSortint a            boolean swapped  true        int start  0        int end  alength         while swapped  true                     reset the swapped flag on entering the             loop because it might be true from a             previous iteration            swapped  false              loop from bottom to top same as             the bubble sort            for int i  start i  end  1 i                            if ai  ai  1                     int temp  ai                    ai  ai  1                    ai  1  temp                    swapped  true                                          if nothing moved then array is sorted            if swapped  false                break              otherwise reset the swapped flag so that it             can be used in the next stage            swapped  false              move the end point back by one because             item at the end is in its rightful spot            end  end  1              from top to bottom doing the             same comparison as in the previous stage            for int i  end  1 i  start i                            if ai  ai  1                                    int temp  ai                    ai  ai  1                    ai  1  temp                    swapped  true                                          increase the starting point because             the last stage would have moved the next             smallest number to its rightful spot            start  start  1                  Prints the array     void printArrayint a            int n  alength        for int i  0 i  n i            Systemoutprintai           Systemoutprintln          Driver code    public static void mainString args            CocktailSort ob  new CocktailSort        int a   5 1 4 2 8 0 2         obcocktailSorta        SystemoutprintlnSorted array        obprintArraya    Python# Python program for implementation of Cocktail Sort  def cocktailSorta    n  lena    swapped  True    start  0    end  n1    while swapped  True         # reset the swapped flag on entering the loop        # because it might be true from a previous        # iteration        swapped  False         # loop from left to right same as the bubble        # sort        for i in rangestart end            if ai  ai  1                ai ai  1  ai  1 ai                swapped  True         # if nothing moved then array is sorted        if swapped  False            break         # otherwise reset the swapped flag so that it        # can be used in the next stage        swapped  False         # move the end point back by one because        # item at the end is in its rightful spot        end  end1         # from right to left doing the same        # comparison as in the previous stage        for i in rangeend1 start1 1            if ai  ai  1                ai ai  1  ai  1 ai                swapped  True         # increase the starting point because        # the last stage would have moved the next        # smallest number to its rightful spot        start  start  1  # Driver codea  5 1 4 2 8 0 2cocktailSortaprintSorted array isfor i in rangelena    print d  aiC# C# program for implementation of Cocktail Sortusing System class GFG      static void cocktailSortint a            bool swapped  true        int start  0        int end  aLength         while swapped  true               reset the swapped flag on entering the             loop because it might be true from a             previous iteration            swapped  false              loop from bottom to top same as             the bubble sort            for int i  start i  end  1 i                 if ai  ai  1                     int temp  ai                    ai  ai  1                    ai  1  temp                    swapped  true                                          if nothing moved then array is sorted            if swapped  false                break              otherwise reset the swapped flag so that it             can be used in the next stage            swapped  false              move the end point back by one because             item at the end is in its rightful spot            end  end  1              from top to bottom doing the             same comparison as in the previous stage            for int i  end  1 i  start i                 if ai  ai  1                     int temp  ai                    ai  ai  1                    ai  1  temp                    swapped  true                                          increase the starting point because             the last stage would have moved the next             smallest number to its rightful spot            start  start  1                  Prints the array     static void printArrayint a            int n  aLength        for int i  0 i  n i            ConsoleWriteai           ConsoleWriteLine          Driver code    public static void Main            int a   5 1 4 2 8 0 2         cocktailSorta        ConsoleWriteLineSorted array         printArraya      This code is contributed by Sam007Javascriptscript     Javascript program for implementation of Cocktail Sort         function cocktailSorta            let swapped  true        let start  0        let end  alength          while swapped  true                reset the swapped flag on entering the             loop because it might be true from a             previous iteration            swapped  false               loop from bottom to top same as             the bubble sort            for let i  start i  end  1 i                 if ai  ai  1                     let temp  ai                    ai  ai  1                    ai  1  temp                    swapped  true                                           if nothing moved then array is sorted            if swapped  false                break               otherwise reset the swapped flag so that it             can be used in the next stage            swapped  false               move the end point back by one because             item at the end is in its rightful spot            end  end  1               from top to bottom doing the             same comparison as in the previous stage            for let i  end  1 i  start i                 if ai  ai  1                     let temp  ai                    ai  ai  1                    ai  1  temp                    swapped  true                                           increase the starting point because             the last stage would have moved the next             smallest number to its rightful spot            start  start  1                   Prints the array     function printArraya            let n  alength        for let i  0 i  n i            documentwriteai           documentwritebr             let a   5 1 4 2 8 0 2     cocktailSorta    documentwriteSorted array   br    printArraya          This code is contributed by decode2207scriptOutputSorted array 
0 1 2 2 4 5 8 People have given many different names to cocktail sortShaker Sort BiDirectional SortCocktail Shaker SortShuttle SortHappy Hour SortRipple SortCaseComplexityBest CaseOnAverage CaseOn2Worst CaseOn2SpaceO1 Auxiliary SpaceMaximum number of ComparisonOn2Sorting In Place YesStable YesComparison with Bubble Sort Time complexities are the same but Cocktail performs better than Bubble Sort Typically cocktail sort is less than two times faster than bubble sort Consider the example 2 3 4 5 1 Bubble sort requires four traversals of an array for this example while Cocktail sort requires only two traversals Source WikiNumber of ElementsUnoptimized Bubble SortOptimized Bubble sortCocktail sort1002ms1ms1ms10008ms6ms1ms10000402ms383ms1msCocktail sort also known as cocktail shaker sort or bidirectional bubble sort is a variation of the bubble sort algorithm Like the bubble sort algorithm cocktail sort sorts an array of elements by repeatedly swapping adjacent elements if they are in the wrong order However cocktail sort also moves in the opposite direction after each pass through the array making it more efficient in certain casesThe basic idea of cocktail sort is as followsStart from the beginning of the array and compare each adjacent pair of elements If they are in the wrong order swap themContinue iterating through the array in this manner until you reach the end of the arrayThen move in the opposite direction from the end of the array to the beginning comparing each adjacent pair of elements and swapping them if necessaryContinue iterating through the array in this manner until you reach the beginning of the arrayRepeat steps 14 until the array is fully sortedHeres an example of cocktail sort in action sorting an array of integers in ascending orderSure here are some potential advantages and disadvantages of using the cocktail sort algorithmAdvantagesCocktail sort can be more efficient than bubble sort in certain cases especially when the array being sorted has a small number of unsorted elements near the endCocktail sort is a simple algorithm to understand and implement making it a good choice for educational purposes or for sorting small datasetsDisadvantagesCocktail sort has a worstcase time complexity of On2 which means that it can be slow for large datasets or datasets that are already partially sortedCocktail sort requires additional bookkeeping to keep track of the starting and ending indices of the subarrays being sorted in each pass which can make thealgorithm less efficient in terms of memory usage than other sorting algorithmsThere are more efficient sorting algorithms available such as merge sort and quicksort that have better averagecase and worstcase time complexity than cocktail sort One example C#include bitsstdchusing namespace std void cocktail_sortvectorint arr     int n  arrsize    bool swapped  true    int start  0    int end  n  1    while swapped          Move from left to right        swapped  false        for int i  start i  end i             if arri  arri  1                 swaparri arri  1                swapped  true                            if swapped             break                end         Move from right to left        swapped  false        for int i  end  1 i  start i             if arri  arri  1                 swaparri arri  1                swapped  true                            start     int main     vectorint arr  5 2 9 3 7 6    cocktail_sortarr    for auto x  arr         cout  x           cout  endl    return 0Python3def cocktail_sortarr    n  lenarr    swapped  True    start  0    end  n  1    while swapped        # Move from left to right        swapped  False        for i in rangestart end            if arri  arri  1                arri arri  1  arri  1 arri                swapped  True        if not swapped            break        end  1        # Move from right to left        swapped  False        for i in rangeend  1 start  1 1            if arri  arri  1                arri arri  1  arri  1 arri                swapped  True        start  1 # Example usagearr  5 2 9 3 7 6cocktail_sortarrprintarrC#using Systemusing SystemCollectionsGeneric class CocktailSort     static void Mainstring args         Listint arr  new Listint 5 2 9 3 7 6        cocktailSortarr        foreach var x in arr             ConsoleWritex                   ConsoleWriteLine         static void cocktailSortListint arr         int n  arrCount        bool swapped  true        int start  0        int end  n  1        while swapped              Move from left to right            swapped  false            for int i  start i  end i                 if arri  arri  1                     Swaparr i i  1                    swapped  true                                        if swapped                 break                        end             Move from right to left            swapped  false            for int i  end  1 i  start i                 if arri  arri  1                     Swaparr i i  1                    swapped  true                                        start                 static void SwapListint arr int i int j         int temp  arri        arri  arrj        arrj  temp    Javascriptfunction cocktail_sortarr     let n  arrlength    let swapped  true    let start  0    let end  n  1     while swapped                  Move from left to right        swapped  false        for let i  start i  end i             if arri  arri  1                 arri arri  1  arri  1 arri                swapped  true                             if swapped break         end  1          Move from right to left        swapped  false        for let i  end  1 i  start i             if arri  arri  1                 arri arri  1  arri  1 arri                swapped  true                             start  1         return arr  Example usagelet arr  5 2 9 3 7 6cocktail_sortarrconsolelogarrOutput2 3 5 6 7 9Complexity Analysis The time complexity of Cocktail Sort is On2 in the worst and average cases where n is the number of elements in the array This is because the algorithm iterates through the array multiple times and in the worst case each iteration involves comparing every element to its neighbor and possibly swapping them
The best case time complexity is On when the array is already sorted but this is a rare case
The space complexity of Cocktail Sort is O1 which is constant This is because the algorithm sorts the array in place without using any extra memoryReferences httpsenwikipediaorgwikiCocktail_shaker_sorthttpwillthimblebynetalgorithmsdokuphpidcocktail_sorthttpwwwprogrammingalgorithmsnetarticle40270ShakersortThis article is contributed by Rahul Agrawal If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or if you want to share more information about the topic discussed above RecommendedSolve DSA problems on GfG PracticeSolve Problems"
138339.0,C++ String Class and its Applications,,,"thetmpguy,niharikatanwar61,sackshamsharmaintern",0.0,articles/138339.txt,https://www.geeksforgeeks.org/c-string-class-applications-set-2/,,"C string class and its applications have more functions as discussed in this article String vs Character Array In C in addition to a character array there exists a similar kind of way to implement string that is using a string class which is a part of C standard libraryWe need to add a header file to implement string using string class The basic difference between a character array and a string is in the case of a character array the size has to be allotted at the time of declaration ie all memory once allocated is fixed and cannot be altered at run time Whereas for string there is no need to specify the size and to allocate fixed memory at the time of declaration C C Program to Demonstrate String Class#includeiostream for string class#includestringusing namespace stdint main     Size has to be predefined in character array    char str80  GeeksforGeeks        Size not predefined in string    string sGeeksforGeeks        Printing character array and string    cout  str  endl    cout  s  endl    return 0OutputGeeksforGeeks
GeeksforGeeksSome useful String Functions1 comparestring_to_compare It is used to compare two strings It returns the difference between the second string and the first string in the integer C C program to demonstrate use of compare#include iostream#include stringusing namespace stdint main    string strGeeksforGeeks    string str1GeeksforGeeks      Comparing strings using compare    if strcomparestr1  0        cout  Strings are equal    else        cout  Strings are unequal    return 0OutputStrings are equal2 findstringSearches the string for the first occurrence of the substring specified in arguments It returns the position of the first occurrence of substring3 find_first_ofstringSearches the string for the first character that matches any of the characters specified in its arguments It returns the position of the first character that matches4 find_last_ofstringSearches the string for the last character that matches any of the characters specified in its arguments It returns the position of the last character that matches5 rfindstringSearches the string for the last occurrence of the substring specified in arguments It returns the position of the last occurrence of a substring C C program to demonstrate working of find rfindfind_first_of and find_last_of#includeiostream#includestringusing namespace stdint main    string strThe Geeks for Geeks      find returns position to first     occurrence of substring Geeks    cout  First occurrence of Geeks starts from      cout  strfindGeeks  endl      Prints position of first occurrence of     any character of reef Prints 2    cout  First occurrence of character from reef is at      cout  strfind_first_ofreef  endl      Prints position of last occurrence of     any character of reef Prints 16    cout  Last occurrence of character from reef is at      cout  strfind_last_ofreef  endl      rfind returns position to last     occurrence of substring Geeks     Prints 14    cout  Last occurrence of Geeks starts from      cout  strrfindGeeks  endl     return 0OutputFirst occurrence of Geeks starts from  4
First occurrence of character from reef is at  2
Last occurrence of character from reef is at  16
Last occurrence of Geeks starts from  146 insertpos_to_beginstring_to_insert This function inserts the given substring in the string It takes two arguments first the position from which you want to insert the substring and second the substring C C program to demonstrate working of insert#includeiostream#includestringusing namespace stdint main    string strGeeksfor      Printing the original string    cout  str  endl      Inserting Geeks at 8th index position    strinsert8Geeks      Printing the modified string     Prints GeeksforGeeks    cout  str  endl     return 0OutputGeeksfor
GeeksforGeeks7 clearThis function clears all the characters from the string The string becomes empty length becomes 0 after this operation8 emptyTests whether the string is empty This function returns a Boolean valueC C program to demonstrate working of clear and empty#includeiostream#includestringusing namespace stdint main    string strGeeksforGeeks      clearing string    strclear      Checking if string is empty    strempty1        cout  String is empty  endl        cout  String is not empty  endl     return 0 OutputString is emptyThis article is contributed by Manjeet Singh If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other Geeks Please write comments if you find anything incorrect or if you want to share more information about the topic discussed above"
138332.0,How to sum two integers without using arithmetic operators in C/C++?,,,"Akanksha_Rai,nikitamathur",4.0,articles/138332.txt,https://www.geeksforgeeks.org/how-to-sum-two-integers-without-using-arithmetic-operators-in-cc/,"https://media.geeksforgeeks.org/wp-content/uploads/sumArray.png,https://media.geeksforgeeks.org/wp-content/uploads/sumArray1.png,https://media.geeksforgeeks.org/wp-content/uploads/sumArray2.png,https://media.geeksforgeeks.org/wp-content/uploads/sumArray3.png",Given two integers a and b how can we evaluate the sum a  b without using operators such as     Method 1 Using pointersAn interesting way would be CPP May not work with C compilers and may produce warnings in C  Returns sum of a and bint sumint a int b    char p  a    return intpbDespite its awkwardness at first sight we can easily understand what is happening First we created a pointer p The value of a pointer is a memory address In this case the value of p is the address a  Remember p points to position a In that example if we want to know the value of position a 999 we ask to p If we want to know the address of variable a 41 we ask to a If we evaluated pb wed get the value of memory in position p  b In fact we evaluate pb which is the same as getting address p  b without accessing its value As p  a pb will return the address a  b We dont want to return a memory address int We want to return an integer int So we cast pb to int What happens if we change the type of p from char to int Let me fix what I said before When we evaluate pb we dont evaluate p  b We evaluate p  sizeofp  b Why Imagine this example Variables of type int occupies fours positions in the memory  This sizeofp considers the quantity of positions each variable occupies in the memory We want to evaluate p  b In other words we want sizeofp equals to 1 Consequently if p is a char were happyMethod 2 Using bitwise operatorsLets look the sums truth table forgive the carry for now Looking carefully we notice that the sums and xors truth table are the same Its 1 only when the input differs Now how can we detect carry Lets look the carrys truth table  Looking carefully we notice that the sums and xors truth table are the same Its 1 only when the input differs Now how can we detect carry Lets look the carrys truth table  Looking carefully one more time we notice that the carrys and logical ands truth table are identicals Now we have to shift a  1 to left and sum with a  b However these operations may have carries as well No problem just sum a  b with a  1 shifted to left recursively CPP Returns sum of a and b using bitwise operatorsint sumint a int b    int s  a  b    int carry  a  b     if carry  0 return s    else return sums carry  1This solution has been discussed here  Method 3 Using printfLets remember some factsThe printf returns the number of characters printed successfullyThe specifier c requests two parameters The first one is the customized width and the second is character For example printfc 5 a will print  aThe special character r returns the cursor from the beginning of output string For example printfabcdr12 will print 12cdKeeping that in mind we can understand this function CPP Returns sum of a and b using printf Constraints a b  0int sumint a int b    return printfcc a r b rThis solution has been discussed here This article is contributed by Igor Carpanese If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other Geeks Please write comments if you find anything incorrect or you want to share more information about the topic discussed aboveRecommendedSolve DSA problems on GfG PracticeSolve Problems
138331.0,Print shortest path to print a string on screen,,,"nitin mittal,Sanjit_Prasad,Chandan_Kumar,nidhi_biet,divyeshrabadiya07,tarakki100,sumitgumber28",0.0,articles/138331.txt,https://www.geeksforgeeks.org/print-shortest-path-print-string-screen/,,"Given a screen containing alphabets from AZ we can go from one character to another characters using a remote The remote contains left right top and bottom keysFind shortest possible path to type all characters of given string using the remote Initial position is top left and all characters of input string should be printed in orderScreen  A B C D E
F G H I J
K L M N O
P Q R S T
U V W X Y
ZExample  Input GEEK
Output 
Move Down
Move Right
Press OK
Move Up
Move Right
Move Right
Move Right
Press OK
Press OK
Move Left
Move Left
Move Left
Move Left
Move Down
Move Down
Press OK Recommended PracticePrimitive TypingTry ItThe idea is to consider screen as 2Dmatrix of characters Then we consider all characters of given string one by one and print out the shortest path between current character and next character in the matrix In order to find shortest path we consider the coordinates of current character and next character in the matrix Based on the difference between x and y values of current and next characters coordinates we move left right top or bottom ie  If row difference is negative we move up
If row difference is positive we move down
If column difference is negative we go left
If column difference is positive we go rightBelow is implementation of above idea C C program to print shortest possible path to type all characters of given string using a remote#include iostreamusing namespace std  Function to print shortest possible path to type all characters of given string using a remotevoid printPathstring str    int i  0     start from character A present at position 0 0    int curX  0 curY  0    while i  strlength             find coordinates of next character        int nextX  stri  A  5        int nextY  stri  B  1  5          Move Up if destination is above        while curX  nextX                    cout  Move Up  endl            curX                  Move Left if destination is to the left        while curY  nextY                    cout  Move Left  endl            curY                  Move down if destination is below        while curX  nextX                    cout  Move Down  endl            curX                  Move Right if destination is to the right        while curY  nextY                    cout  Move Right  endl            curY                  At this point destination is reached        cout  Press OK  endl        i      Driver codeint main    string str  COZY     printPathstr     return 0Java Java program to print shortest possible path to type all characters of given string using a remote class GFG     Function to print shortest possible path to     type all characters of given string using a remote    static void printPathString str            int i  0         start from character A present at position 0 0        int curX  0 curY  0        while i  strlength                     find coordinates of next character            int nextX  strcharAti  A  5            int nextY  strcharAti  B  1  5               Move Up if destination is above            while curX  nextX                            SystemoutprintlnMove Up                curX                           Move Left if destination is to the left            while curY  nextY                            SystemoutprintlnMove Left                curY                           Move down if destination is below            while curX  nextX                            SystemoutprintlnMove Down                curX                           Move Right if destination is to the right            while curY  nextY                            SystemoutprintlnMove Right                curY                           At this point destination is reached            SystemoutprintlnPress OK            i                      driver program    public static void main String args            String str  COZY        printPathstr      Contributed by Pramod KumarPython3# Python 3 program to print shortest possible# path to type all characters of given string# using a remote # Function to print shortest possible path# to type all characters of given string# using a remotedef printPathstr    i  0         # start from character A present    # at position 0 0    curX  0    curY  0    while i  lenstr                 # find coordinates of next character        nextX  intordstri  ordA  5        nextY  ordstri  ordB  1  5         # Move Up if destination is above        while curX  nextX            printMove Up            curX  1         # Move Left if destination is to the left        while curY  nextY            printMove Left            curY  1         # Move down if destination is below        while curX  nextX            printMove Down            curX  1         # Move Right if destination is to the right        while curY  nextY            printMove Right            curY  1         # At this point destination is reached        printPress OK        i  1 # Driver codeif __name__  __main__    str  COZY     printPathstr # This code is contributed by# Sanjit_PrasadC# C# program to print shortest possible path to type all characters of given string using a remoteusing System class GFG           Function to print shortest     possible path to type all     characters of given string     using a remote    static void printPathString str            int i  0                  start from character A         present at position 0 0        int curX  0 curY  0        while i  strLength                                  find coordinates of             next character            int nextX  stri  A  5            int nextY  stri  B  1  5              Move Up if destination             is above            while curX  nextX                            ConsoleWriteLineMove Up                curX                          Move Left if destination             is to the left            while curY  nextY                            ConsoleWriteLineMove Left                curY                          Move down if destination             is below            while curX  nextX                            ConsoleWriteLineMove Down                curX                          Move Right if destination             is to the right            while curY  nextY                            ConsoleWriteLineMove Right                curY                          At this point destination             is reached            ConsoleWriteLinePress OK            i                      Driver Code    public static void Main             String str  COZY        printPathstr      This Code is contributed by nitin mittalPHPphp PHP program to print shortest possible path to type all characters of given string using a remote  Function to print shortest possible path to type all characters of given string using a remotefunction printPathstr    i  0     start from character A present at position 0 0    curX  curY  0    while i  strlenstr             find coordinates of next character        nextX  intordstri  ordA  5        nextY  ordstri  ordB  1  5          Move Up if destination is above        while curX  nextX                    echo Move Upn            curX                  Move Left if destination is to the left        while curY  nextY                    echo Move Leftn            curY                  Move down if destination is below        while curX  nextX                    echo Move Downn            curX                  Move Right if destination is to the right        while curY  nextY                    echo Move Rightn            curY                  At this point destination is reached        echo Press OKn        i      Driver code    str  COZY     printPathstr   This code is contributed by chandan_jnuJavascriptscript      JavaScript program to print shortest     possible path to type all     characters of given string     using a remote          Function to print shortest     possible path to type all     characters of given string     using a remote    function printPathstr            let i  0                   start from character A         present at position 0 0        let curX  0 curY  0        while i  strlength                                   find coordinates of             next character            let nextX  parseIntstricharCodeAt             AcharCodeAt  5 10            let nextY  stricharCodeAt             BcharCodeAt  1  5               Move Up if destination             is above            while curX  nextX                            documentwriteMove Up  br                curX                           Move Left if destination             is to the left            while curY  nextY                            documentwriteMove Left  br                curY                           Move down if destination             is below            while curX  nextX                            documentwriteMove Down  br                curX                           Move Right if destination             is to the right            while curY  nextY                            documentwriteMove Right  br                curY                           At this point destination             is reached            documentwritePress OK  br            i                     let str  COZY      printPathstr   scriptOutput Move Right
Move Right
Press OK
Move Down
Move Down
Move Right
Move Right
Press OK
Move Left
Move Left
Move Left
Move Left
Move Down
Move Down
Move Down
Press OK
Move Up
Move Right
Move Right
Move Right
Move Right
Press OKTime Complexity Onn where n represents the size of the given stringAuxiliary Space O1 no extra space is required so it is a constant This article is contributed by Aditya Goel If you like GeeksforGeeks and would like to contribute you can also write an article using writegeeksforgeeksorg or mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above"
138329.0,Number of non-negative integral solutions of a + b + c = n,,,"Smitha Dinesh Semwal,vt_m,parashar,jatingrg2399,surbhityagi15,souravghosh0416",0.0,articles/138329.txt,https://www.geeksforgeeks.org/number-non-negative-integral-solutions-b-c-n/,,"Given a number n find the number of ways in which  we can add 3 nonnegative integers so that their sum is nExamples   Input  n  1
Output  3
There are three ways to get sum 1
1 0 0 0 1 0 and 0 0 1

Input  n  2
Output  6
There are six ways to get sum 2
2 0 0 0 2 0 0 0 2 1 1 0
1 0 1 and 0 1 1

Input  n  3
Output  10
There are ten ways to get sum 3
3 0 0 0 3 0 0 0 3 1 2 0
1 0 2 0 1 2 2 1 0 2 0 1
0 2 1 and 1 1 1 Recommended PracticeNumber of Integer solutionsTry ItMethod 1  Brute Force  On3  A simple solution is to consider all triplets using three loops For every triplet check if its sum is equal to n If the sum is n increment the count of solutions Below is the implementation  C A naive C solution to count solutions of a  b  c  n#includebitsstdchusing namespace std  Returns count of solutions of a  b  c  nint countIntegralSolutionsint n     Initialize result    int result  0      Consider all triplets and increment     result whenever sum of a triplet is n    for int i0 in i      for int j0 jni j          for int k0 knij k             if i  j  k  n              result     return result  Driver codeint main    int n  3    cout   countIntegralSolutionsn    return 0Java A naive Java solution to count solutions of a  b  c  nimport javaio class GFG     Returns count of solutions of a  b  c  n    static int countIntegralSolutionsint n             Initialize result        int result  0              Consider all triplets and increment         result whenever sum of a triplet is n        for int i  0 i  n i        for int j  0 j  n  i j            for int k  0 k  n  i  j k                if i  j  k  n                result             return result          Driver code    public static void main String args            int n  3        Systemoutprintln countIntegralSolutionsn           This article is contributed by vt_mPython3# Python3 code to count# solutions of a  b  c  n # Returns count of solutions# of a  b  c  ndef countIntegralSolutions n     # Initialize result    result  0         # Consider all triplets and    # increment result whenever    # sum of a triplet is n    for i in rangen  1        for j in rangen  1            for k in rangen  1                if i  j  k  n                    result  1         return result     # Driver coden  3printcountIntegralSolutionsn # This code is contributed by Sharad_BhardwajC# A naive C# solution to count solutions of a  b  c  nusing System class GFG           Returns count of solutions     of a  b  c  n    static int countIntegralSolutionsint n                      Initialize result        int result  0              Consider all triplets and increment         result whenever sum of a triplet is n        for int i  0 i  n i            for int j  0 j  n  i j                for int k  0 k  n  i  j k                    if i  j  k  n                    result             return result          Driver code    public static void Main             int n  3        ConsoleWritecountIntegralSolutionsn           This article is contributed by SmithaPHPphp A naive PHP solution to count solutions of a  b  c  n  Returns count of solutions of a  b  c  nfunction countIntegralSolutions n          Initialize result    result  0      Consider all triplets and increment     result whenever sum of a triplet is n    for i  0 i  n i        for j  0 j  n  i j            for k  0 k  n  i  j k            if i  j  k  n            result     return result      Driver Code    n  3    echo countIntegralSolutionsn  This code is contributed by anuj_67Javascriptscript  Javascript program solution to count solutions of a  b  c  n    Returns count of solutions of a  b  c  n    function countIntegralSolutionsn             Initialize result        let result  0                Consider all triplets and increment         result whenever sum of a triplet is n        for let i  0 i  n i        for let j  0 j  n  i j            for let k  0 k  n  i  j k                if i  j  k  n                result               return result      Driver Code     let n  3    documentwritecountIntegralSolutionsn scriptOutput 10Time complexity On3Auxiliary Space O1Method 2  Direct Formula  O1  If we take a closer look at the pattern we can find that the count of solutions is n1  n2  2 The problem is equivalent to distributing n identical balls  in three boxes and the solution is n2C2 In general if there are m variables or boxes and n balls  the formula becomes nm1Cm1  C A naive C solution to count solutions of a  b  c  n#includebitsstdchusing namespace std  Returns count of solutions of a  b  c  nint countIntegralSolutionsint n    return n1n22  Driver codeint main    int n  3    cout   countIntegralSolutionsn    return 0Java Java solution to count solutions of a  b  c  nimport javaio class GFG     Returns count of solutions     of a  b  c  n    static int countIntegralSolutionsint n        return n  1  n  2  2                       Driver code    public static void main String args            int n  3        Systemoutprintln  countIntegralSolutionsn              This article is contributed by vt_mPython3# Python3 solution to count# solutions of a  b  c  n # Returns count of solutions# of a  b  c  ndef countIntegralSolutions n    return intn  1  n  2  2     # Driver coden  3printcountIntegralSolutionsn # This code is contributed by Sharad_BhardwajC# C# solution to count solutions of a  b  c  nusing System class GFG           Returns count of solutions     of a  b  c  n    static int countIntegralSolutionsint n            return n  1  n  2  2              Driver code    public static void Main String args            int n  3        ConsoleWrite  countIntegralSolutionsn               This code is contributed by parasharPHPphp A naive PHP solution to count solutions of a  b  c  n  Returns count of solutions of a  b  c  nfunction countIntegralSolutionsn    return n  1  n  2  2      Driver Code    n  3    echo countIntegralSolutionsn  This code is contributed by anuj_67Javascriptscript  A naive JavaScript solution to count solutions of a  b  c  n  Returns count of solutions of a  b  c  nfunction countIntegralSolutionsn    return Mathfloorn1n22  Driver code     let n  3    documentwritecountIntegralSolutionsn   This code is contributed by Surbhi Tyagi scriptOutput  10Time complexity O1Auxiliary Space O1This article is contributed by Shivam Gupta If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above"
138324.0,Minimum sum of two numbers formed from digits of an array,,,"nitin mittal,souravghosh0416,kothavvsaakash,vishaldhaygude01,shinjanpatra,aroraritesh95,rajatkumargla19,raj2002,sayanc170,janardansthox,sourabhdalal0001",0.0,articles/138324.txt,https://www.geeksforgeeks.org/minimum-sum-two-numbers-formed-digits-array/,,1Given an array of digits values are from 0 to 9 the task is to find the minimum possible sum of two numbers formed from digits of the array Please note that all digits of the given array must be used to form the two numbers  Examples Input 6 8 4 5 2 3Output 604Explanation The minimum sum is formed by numbers 358 and 246Input 5 3 0 7 4Output 82Explanation The minimum sum is formed by numbers 35 and 047 Recommended PracticeMinimum sumTry ItMinimum sum of two numbers formed from digits of an array using SortingA minimum number will be formed from set of digits when smallest digit appears at most significant position and next smallest digit appears at next most significant position and so on The idea is to sort the array in increasing order and build two numbers by alternating picking digits from the array So first number is formed by digits present in odd positions in the array and second number is formed by digits from even positions in the arrayFollow the given steps to solve the problemSort the array in increasing orderDeclare two variables a and b representing the two numbers to be formedTraverse the array and if the index is odd then add this element into a else add it to bReturn the sum of two variables a  bBelow is the Implementation of the above approach C C program to find minimum sum of two numbers formed from digits of the array #include stdioh#include stdlibh int cmpfuncconst void a const void b    return inta  intb  Function to find and return minimum sum of two numbers formed from digits of the arrayint solveint arr int N     Sort the array    qsortarr N sizeofint cmpfunc      Let two numbers be a and b    int a  0 b  0    for int i  0 i  N i          fill a and b with every alternate digit         of input array        if i  1            a  a  10  arri        else            b  b  10  arri          return the sum    return a  b  Drivers codeint main    int arr   6 8 4 5 2 3     int N  sizeofarr  sizeofarr0      Function call    printfSum is d solvearr N    return 0C C program to find minimum sum of two numbers formed from digits of the array #include bitsstdchusing namespace std  Function to find and return minimum sum of two numbers formed from digits of the arrayint solveint arr int N     Sort the array    sortarr arr  N      Let two numbers be a and b    int a  0 b  0    for int i  0 i  N i          fill a and b with every alternate digit         of input array        if i  1            a  a  10  arri        else            b  b  10  arri          return the sum    return a  b  Drivers codeint main    int arr   6 8 4 5 2 3     int N  sizeofarr  sizeofarr0      Function call    cout  Sum is   solvearr N    return 0Java Java program to find minimum sum of two numbers formed from digits of the array import javautilArrays class GFG       Function to find and return minimum sum of     two numbers formed from digits of the array    static int solveint arr int N              sort the array        Arrayssortarr          let two numbers be a and b        int a  0 b  0        for int i  0 i  N i               fill a and b with every alternate             digit of input array            if i  2  0                a  a  10  arri            else                b  b  10  arri                  return the sum        return a  b          drivers code    public static void mainString args            int arr   6 8 4 5 2 3         int N  arrlength         SystemoutprintSum is   solvearr N      This code is contributed by Anant AgarwalPython3# Python3 program to find minimum sum of two# numbers formed from digits of the array # Function to find and return minimum sum of# two numbers formed from digits of the array  def solvearr N     # sort the array    arrsort     # let two numbers be a and b    a  0    b  0    for i in rangeN         # Fill a and b with every alternate        # digit of input array        if i  2  0            a  a  10  arri        else            b  b  10  arri     # return the sum    return a  b  # Drivers codeif __name__  __main__    arr  6 8 4 5 2 3    N  lenarr     # Function call    printSum is  solvearr N     # This code is contributed by Anant AgarwalC# C# program to find minimum sum of two numbers formed from digits of the array using System class GFG      Function to find and return     minimum sum of two numbers     formed from digits of the array    static int solveint arr int N             Sort the array        ArraySortarr          Let two numbers be a and b        int a  0 b  0        for int i  0 i  N i              Fill a and b with every alternate digit             of input array            if i  2  0                a  a  10  arri            else                b  b  10  arri                  Return the sum        return a  b          Drivers code    public static void Main            int arr   6 8 4 5 2 3         int N  arrLength          Function call        ConsoleWriteLineSum is   solvearr N      This code is contributed by Anant AgarwalPHPphp PHP program to find minimum sum of two numbers formed from digits of the array  Function to find and return minimum sum of two numbers formed from digits of the arrayfunction solvearr N     sort the array    sortarr sortarr  N      let two numbers be a and b    a  0 b  0    for i  0 i  N i             fill a and b with every         alternate digit of input array        if i  1            a  a  10  arri        else            b  b  10  arri          return the sum    return a  b  Drivers codearr  array6 8 4 5 2 3N  sizeofarr  Function callecho Sum is   solvearr N      This code is contributed by nitin mittalJavascript Javascript program to find minimum sum of two numbers formed from digits of the array      Function to find and return minimum sum of     two numbers formed from digits of the array    function solvearr n                        sort the array        arrsort                let two numbers be a and b        let a  0 b  0        for let i  0 i  n i                                    fill a and b with every alternate             digit of input array            if i  2  0                a  a  10  arri            else                b  b  10  arri                        return the sum        return a  b      Driver Code         let arr  6 8 4 5 2 3        let n  arrlength                   documentwriteSum is                            solvearr nOutputSum is 604Time Complexity ONlog2N because of we are using the sort function in all the code snipets  Auxiliary Space O1Minimum sum of two numbers formed from digits of an array for large numbers using StringsThe basic idea of approaching the question is the same as above but instead of using numbers strings will be used to handle sum of two large numbersFollow the given steps to solve the problemSort the array in increasing orderDeclare two strings a and b representing the two numbers to be formedTraverse the array and if the index is odd then add this element into string a else add it to the string bReturn the sum of two strings in the form of a stringBelow is the Implementation of the above approachC C code for the above approach #include bitsstdchusing namespace std string solveint arr int n     sortarr arr  n      Two String for storing our two minimum numbers    string a   b       for int i  0 i  n i  2         a  arri  0        for int i  1 i  n i  2         b  arri  0         int j  alength  1    int k  blength  1      as initial carry is zero    int carry  0    string ans      while j  0  k  0         int sum  0        sum  aj  0  bk  0  carry        ans  to_stringsum  10        carry  sum  10        j        k          If string b is over and string a is left     here we dont need to put here while condition     as it would run at max one time Because the     difference between both the strings could be at     max 1    while j  0         int sum  0        sum  aj  0  carry        ans  to_stringsum  10        carry  sum  10        j          If string a is over and string b is left    while k  0         int sum  0        sum  bk  0  carry        ans  to_stringsum  10        carry  sum  10        k         if carry is left    if carry         ans  to_stringcarry          to remove leading zeroes as they will be ahead of our     sum    while ansempty and ansback  0        anspop_back      reverse our final string because we were storing sum     from left to right    reverseansbegin ansend    return ans   Drivers Codeint main    int arr   6 8 4 5 2 3     int N  sizeofarr  sizeofarr0      Function call    cout  Sum is   solvearr N    return 0   Driver Code EndsJava Java code for the above approach import javautilArraysimport javautilCollections class Main      public static String reverseStringString str             StringBuilder sb  new StringBuilderstr        sbreverse        return sbtoString         public static String solveint arr int N             Arrayssortarr          Two String for storing our two minimum numbers        String a   b           for int i  0 i  N i  2             a  IntegertoStringarri                for int i  1 i  N i  2             b  IntegertoStringarri                 int j  alength  1        int k  blength  1          As initial carry is zero        int carry  0        String ans          while j  0  k  0              int sum  0            sum  acharAtj  0  bcharAtk  0                    carry            int x  sum  10            ans  IntegertoStringsum  10            carry  sum  10            j            k                  If string b is over and string a is left         here we dont need to put here while condition         as it would run at max one time Because the         difference between both the strings could be at         max 1        while j  0             int sum  0            sum  acharAtj  0  carry            ans  IntegertoStringsum  10            carry  sum  10            j                  If string a is over and string b is left        while k  0             int sum  0            sum  bcharAtk  0  carry            ans  IntegertoStringsum  10            carry  sum  10            k                 if carry is left        if carry  0             ans  IntegertoStringcarry                  to remove leading zeroes as they will be ahead of         our sum        while ansisEmpty  false                anscharAtanslength  1  0            ans  anssubstring0 anslength  1          reverse our final string because we were storing         sum from left to right        ans  reverseStringans        return ans          drivers code    public static void mainString args            int arr   6 8 4 5 2 3         int N  arrlength          Function call        SystemoutprintSum is   solvearr N      This code is contributed by ChhaviPython3# Python3 code for the approach  def solvearr N     arrsort     # Two String for storing our two minimum numbers    a b        for i in range0 N 2        a  strarri     for i in range1 N 2        b  strarri     j  lena  1    k  lenb  1     # As initial carry is zero    carry  0    ans      while j  0 and k  0        sum  0        sum  ordaj  ord0  ordbk  ord0  carry        ans  strsum  10        carry  sum  10        j  1        k  1     # If string b is over and string a is left    # here we dont need to put here while condition    # as it would run at max one time Because the difference    # between both the strings could be at max 1    while j  0        sum  0        sum  aj  0  carry        ans  sum  10toString        carry  sum  10        j  1     # If string a is over and string b is left    while k  0        sum  0        sum  ordbk  ord0  carry        ans  strsum  10        carry  sum  10        k  1     # If carry is left    if carry        ans  strcarry     # To remove leading zeroes as they will be    # ahead of our sum    while lenans and anslenans  1  0        anspop     # Reverse our final string because we were    # storing sum from left to right    ans  ans1    return ans  # Drivers Codeif __name__  __main__    arr  6 8 4 5 2 3    N  lenarr     # Function call    printSum is   solvearr N # This code is contributed by shinjanpatraC# Include namespace systemusing Systemusing SystemTextusing SystemLinqusing SystemCollections public class GFG    public static string reverseStringstring str      if strLength  1 return str     else return reverseStringstrSubstring1  str0      public static String solveint arr int N            ArraySortarr                Two String for storing our two minimum numbers        var a          var b          for int i  0 i  N        i  2                    a  ConvertToStringarri                for int i  1 i  N        i  2                    b  ConvertToStringarri                var j  aLength  1        var k  bLength  1                As initial carry is zero        var carry  0        var ans          while j  0  k  0                    var sum  0            sum  intaj  int0  intbk  int0  carry            ans  ConvertToStringsum  10            carry  intsum  10            j            k                        If string b is over and string a is left         here we dont need to put here while condition         as it would run at max one time Because the         difference between both the strings could be at         max 1        while j  0                    var sum  0            sum  intaj  int0  carry            ans  ConvertToStringsum  10            carry  intsum  10            j                        If string a is over and string b is left        while k  0                    var sum  0            sum  intbk  int0  carry            ans  ConvertToStringsum  10            carry  intsum  10            k                        if carry is left        if carry  0                    ans  ConvertToStringcarry                        to remove leading zeroes as they will be ahead of         our sum        while ansLength  0  false  ansansLength  1  0        ans  ansSubstring0ansLength  10                        reverse our final string because we were storing         sum from left to right        ans  GFGreverseStringans        return ans            drivers code    public static void MainString args            int arr  6 8 4 5 2 3        var N  arrLength                Function call        ConsoleWriteSum is   GFGsolvearr N      This code is contributed by sourabhdalal0001Javascriptfunction solvearr N          arrsort          Two String for storing our two minimum numbers    let a   b            string string alternatively    for let i  0 i  N i  2            a  arri        for let i  1 i  N i  2            b  arri        let j  alength  1    let k  blength  1     as initial carry is zero    let carry  0    let ans      while j  0  k  0            let sum  0        sum  acharCodeAtj  0charCodeAt0  bcharCodeAtk  0charCodeAt0  carry        ans  sum  10toString        carry  Mathfloorsum  10        j        k         if string b is over and string a is left     here we dont need to put here while condition     as it would run at max one time Because the difference     between both the strings could be at max 1    while j  0            let sum  0        sum  aj  0  carry        ans  sum  10toString        carry  Mathfloorsum  10        j         if string a is over and string b is left    while k  0            let sum  0        sum  bcharCodeAtk  0charCodeAt0  carry        ans  sum  10toString        carry  Mathfloorsum  10        k         if carry is left    if carry            ans  carrytoString              to remove leading zeroes as they will be ahead of our sum    while anslength  ansanslength1  0        anspop              reverse our final string because we were storing sum from left to right    ans  anssplitreversejoin    return ans   Driver Code Starts let arr  6 8 4 5 2 3let N  arrlengthdocumentwriteSum is   solvearr N  This code is contributed by shinjanpatraOutputSum is 604Time complexity ONlog2N because we are sorting the given arrayAuxiliary Space O1 This article is contributed by Aditya Goel If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other GeeksPlease write comments if you find anything incorrect or you want to share more information about the topic discussed above
138317.0,Maximum value K such that array has at-least K elements that are >= K,,,"29AjayKumar,jit_t,SURENDRA_GANGWAR,koulick_sadhu,princiraj1992,nidhi_biet,divyesh072019,gfgking,simmytarika5,shinjanpatra,hardikkoriintern,akshaytripathi19410",0.0,articles/138317.txt,https://www.geeksforgeeks.org/maximum-value-k-such-that-array-has-at-least-k-elements-that-are-k/,,"Given an array of positive integers find maximum possible value K such that the array has atleast K elements that are greater than or equal to K The array is unsorted and may contain duplicate valuesExamples  Input 2 3 4 5 6 7
Output 4
Explanation  4 elements 4 5 6 7 
            are greater than equal to 4

Input 1 2 3 4
Output 2
Explanation  3 elements 2 3 4 are 
               greater than equal to 2

Input 4 7 2 3 8
Output 3 
Explanation  4 elements 4 7 3 8 
          are greater than equal to 3
 

Input 6 7 9 8 10
Output 5
Explanation  All 5 elements are greater
              than equal to 5 Expected time complexity  OnRecommended PracticeMaximum value KTry ItMethod 1 Simple  On2 time Let size of input array be n Let us consider following important observationsThe maximum possible value of result can be n We get the maximum possible value when all elements are greater than or equal to n For example if input array is 10 20 30 n is 3 The value of result cant be greater than 3The minimum possible value would be 1 An example case when get this output is when all elements are 1So we can run a loop from n to 1 and count greater elements for every value C C program to find maximum possible value K such that array has atleast K elements that are greater than or equals to K#include iostreamusing namespace std  Function to return maximum possible value K such that array has atleast K elements that are greater than or equals to Kint findMaximumNumunsigned int arr int n     output can contain any number from n to 0     where n is length of the array      We start a loop from n as we need to find     maximum possible value    for int i  n i  1 i             count contains total number of elements         in input array that are more than equal to i        int count  0          traverse the input array and find count        for int j0 jn j            if i  arrj                count         if count  i          return i           return 1  Driver codeint main    unsigned int arr  1 2 3 8 10     int n  sizeofarr  sizeofarr0    cout  findMaximumNumarr n    return 0Java Java program to find maximum possible value K such that array has atleast K elements that are greater than or equals to Kimport javaio class GFG  Function to return maximum possible value K such that array has atleast K elements that are greater than or equals to Kstatic int findMaximumNumint arr                          int n     output can contain any     number from n to 0 where     n is length of the array      We start a loop from n     as we need to find     maximum possible value    for int i  n i  1 i             count contains total         number of elements         in input array that         are more than equal to i        int count  0          traverse the input         array and find count        for int j  0 j  n j            if i  arrj                count         if count  i        return i        return 1  Driver codepublic static void main String argsint arr  1 2 3 8 10 int n  arrlengthSystemoutprintlnfindMaximumNumarr n  This code is contributed by aj_36Python3# python 3 program to find maximum possible value K# such that array has atleast K elements that# are greater than or equals to K # Function to return maximum possible value K# such that array has atleast K elements that# are greater than or equals to Kdef findMaximumNumarr n    # output can contain any number from n to 0    # where n is length of the array     # We start a loop from n as we need to find    # maximum possible value    i  n    whilei  1        # count contains total number of elements        # in input array that are more than equal to i        count  0         # traverse the input array and find count        for j in range0n1            if i  arrj                count  1         if count  i            return i                     i  1         return 1 # Driver codeif __name__  __main__    arr  1 2 3 8 10    n  lenarr    printfindMaximumNumarr n # This code is contributed by# Surendra_GangwarC# C# program to find maximum possible value K such that array has atleast K elements that are greater than or equals to Kusing System class GFG      Function to return maximum possible value K such that array has atleast K elements that are greater than or equals to Kstatic int findMaximumNumint arr                          int n     output can contain any     number from n to 0 where     n is length of the array      We start a loop from n     as we need to find     maximum possible value    for int i  n i  1 i             count contains total         number of elements         in input array that         are more than equal to i        int count  0          traverse the input         array and find count        for int j  0 j  n j            if i  arrj                count         if count  i        return i        return 1  Driver codestatic public void Main     int arr  1 2 3 8 10     int n  arrLength    ConsoleWriteLinefindMaximumNumarr n  This code is contributed by m_kitPHPphp PHP program to find maximum possible value K such that array has atleast K elements that are greater than or equals to K  Function to return maximum possible value K such that array has atleast K elements that are greater than or equals to Kfunction findMaximumNumarr n     output can contain any     number from n to 0 where     n is length of the array      We start a loop from     n as we need to find     maximum possible value    for i  n i  1 i             count contains total         number of elements in         input array that are         more than equal to i        count  0          traverse the input         array and find count        for j  0 j  n j            if i  arrj                count         if count  i        return i        return 1  Driver codearr  array 1 2 3 8 10n  sizeofarrecho findMaximumNumarr n  This code is contributed by ajitJavascriptscript      Javascript program to find maximum     possible value K such that     array has atleast K elements     that are greater than or equals to K          Function to return maximum     possible value K such that     array has atleast K elements     that are greater than or equals to K    function findMaximumNumarr n             output can contain any         number from n to 0 where         n is length of the array          We start a loop from n         as we need to find         maximum possible value        for let i  n i  1 i                     count contains total             number of elements             in input array that             are more than equal to i            let count  0              traverse the input             array and find count            for let j  0 j  n j                if i  arrj                    count             if count  i            return i                return 1             let arr  1 2 3 8 10     let n  arrlength    documentwritefindMaximumNumarr n     scriptOutput3Time Complexity  ON2 here N is size of arraySpace Complexity  O1  since no  extra space requiredMethod 2 Efficient  On time and On extra space The idea is to construct auxiliary array of size n  1 and use that array to find count of greater elements in input array Let the auxiliary array be freq We initialize all elements of this array as 0We process all input elements If an element arri is less than n then we increment its frequency ie we do freqarri Else we increment freqnAfter step 2 we have two things Frequencies of elements for elements smaller than n stored in freq0n1 Count of elements greater than n stored in freqnFinally we process the freq array backwards to find the output by keeping sum of the values processed so farBelow is implementation of above ideaC C program to find maximum possible value K such that array has atleast K elements that are greater than or equals to K#include bitsstdchusing namespace std  Function to return maximum possible value K such that array has atleast K elements that are greater than or equals to Kint findMaximumNumunsigned int arr int n     construct auxiliary array of size n  1 and     initialize the array with 0    vectorint freqn1 0      store the frequency of elements of     input array in the auxiliary array    for int i  0 i  n i             If element is smaller than n update its         frequency        if arri  n            freqarri          Else increment count of elements greater         than n        else            freqn          sum stores number of elements in input array     that are greater than or equal to current     index    int sum  0      scan auxiliary array backwards    for int i  n i  0 i            sum  freqi          if sum is greater than current index         current index is the answer        if sum  i            return i      Driver codeint main    unsigned int arr  1 2 3 8 10     int n  sizeofarr  sizeofarr0     cout  findMaximumNumarr n     return 0Java Java program to find maximum possible value K such that array has atleast K elements that are greater than or equals to K import javautilVector class GFG   Function to return maximum possible value K such that array has atleast K elements that are greater than or equals to K    static int findMaximumNumint arr int n          construct auxiliary array of size n  1 and         initialize the array with 0        int freqnew intn1        for int i  0 i  n  1 i             freqi  0                  store the frequency of elements of         input array in the auxiliary array        for int i  0 i  n i              If element is smaller than n update its             frequency            if arri  n                             freqarri              Else increment count of elements greater             than n            else                 freqn                              sum stores number of elements in input array         that are greater than or equal to current         index        int sum  0          scan auxiliary array backwards        for int i  n i  0 i             sum  freqi              if sum is greater than current index             current index is the answer            if sum  i                 return i                            return 0      Driver code    public static void mainString args         int arr  1 2 3 8 10        int n  arrlength        SystemoutprintlnfindMaximumNumarr n    This Java code is contributed by koulick_sadhuPython3# Python program to find maximum possible value K such# that array has atleast K elements that are greater# than or equals to K # Function to return maximum possible value K such# that array has atleast K elements that are greater# than or equals to Kdef findMaximumNumarr n     # construct auxiliary array of size n  1 and    # initialize the array with 0    freq  0 for i in rangen1     # store the frequency of elements of    # input array in the auxiliary array    for i in rangen        # If element is smaller than n update its        # frequency        if arri  n            freqarri  1         # Else increment count of elements greater        # than n        else            freqn  1     # sum stores number of elements in input array    # that are greater than or equal to current    # index    sum  0     # scan auxiliary array backwards    for i in rangen01        sum  freqi         # if sum is greater than current index        # current index is the answer        if sum  i            return i # Driver codearr  1 2 3 8 10n  lenarrprintfindMaximumNumarr n # This code is contributed by shinjanpatraC# C# program to find maximum possible value K such that array has atleast K elements that are greater than or equals to Kusing Systemusing SystemCollectionsGeneric class GFG      Function to return maximum possible value K such     that array has atleast K elements that are greater     than or equals to K    static int findMaximumNumint arr int n             construct auxiliary array of size n  1 and         initialize the array with 0        Listint freq  new Listint        for int i  0 i  n  1 i                    freqInserti 0                  store the frequency of elements of         input array in the auxiliary array        for int i  0 i  n i                     If element is smaller than n update its             frequency            if arri  n freqarri                            freqInsertarri freqarri  1                         Else increment count of elements greater             than n            else                            freqInsertn freqn  1                        freqn                  sum stores number of elements in input array         that are greater than or equal to current         index        int sum  0          scan auxiliary array backwards        for int i  n i  0 i                    sum  freqi              if sum is greater than current index             current index is the answer            if sum  i                            return i                            return 0          Driver code    public static void Main            int arr  1 2 3 8 10        int n  arrLength        ConsoleWriteLinefindMaximumNumarr n      This code contributed by PrinciRaj1992 Javascriptscript Javascript program to find maximum possible value K such that array has atleast K elements that are greater than or equals to K  Function to return maximum possible value K such that array has atleast K elements that are greater than or equals to Kfunction findMaximumNumarr n      construct auxiliary array of size n  1 and     initialize the array with 0    let freq  new Arrayn  1fill0      store the frequency of elements of     input array in the auxiliary array    for let i  0 i  n i          If element is smaller than n update its         frequency        if arri  n            freqarri          Else increment count of elements greater         than n        else            freqn          sum stores number of elements in input array     that are greater than or equal to current     index    let sum  0      scan auxiliary array backwards    for let i  n i  0 i         sum  freqi          if sum is greater than current index         current index is the answer        if sum  i            return i      Driver codelet arr  1 2 3 8 10let n  arrlengthdocumentwritefindMaximumNumarr n  This code is contributed by gfgkingscriptOutput3This article is contributed by Aditya Goel If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other Geeks"
138309.0,Longest Common Prefix using Divide and Conquer Algorithm,,,"29AjayKumar,rituraj_jain,rag2127,hardikkoriintern",1.0,articles/138309.txt,https://www.geeksforgeeks.org/longest-common-prefix-using-divide-and-conquer-algorithm/,https://media.geeksforgeeks.org/wp-content/cdn-uploads/longest_common_prefix6.jpg,"Given a set of strings find the longest common prefix Examples Input   geeksforgeeks geeks geek geezer
Output  gee

Input   apple ape april
Output  apWe have discussed word by word matching and character by character matching algorithmsIn this algorithm a divide and conquer approach is discussed We first divide the arrays of string into two parts Then we do the same for left part and after that for the right part We will do it until and unless all the strings become of length 1 Now after that we will start conquering by returning the common prefix of the left and the right strings The algorithm will be clear using the below illustration We consider our strings as  geeksforgeeks geeks geek geezerBelow is the implementation C  A C Program to find the longest common prefix#includebitsstdchusing namespace std  A Utility Function to find the common prefix between strings str1 and str2string commonPrefixUtilstring str1 string str2    string result    int n1  str1length n2  str2length     for int i0 j0 in11jn21 ij            if str1i  str2j            break        resultpush_backstr1i        return result  A Divide and Conquer based function to find the longest common prefix This is similar to the merge sort techniquestring commonPrefixstring arr int low int high    if low  high        return arrlow     if high  low             Same as low  high2 but avoids overflow for         large low and high        int mid  low  high  low  2         string str1  commonPrefixarr low mid        string str2  commonPrefixarr mid1 high         return commonPrefixUtilstr1 str2      Driver program to test above functionint main    string arr  geeksforgeeks geeks                    geek geezer    int n  sizeof arr  sizeof arr0     string ans  commonPrefixarr 0 n1     if anslength        cout  The longest common prefix is               ans    else        cout  There is no common prefix    return 0Java Java Program to find the longest common prefix class GFG   A Utility Function to find the common prefix between strings str1 and str2    static String commonPrefixUtilString str1 String str2         String result          int n1  str1length n2  str2length         for int i  0 j  0 i  n1  1                 j  n2  1 i j             if str1charAti  str2charAtj                 break                        result  str1charAti                return result      A Divide and Conquer based function to find the longest common prefix This is similar to the merge sort technique    static String commonPrefixString arr int low int high         if low  high             return arrlow                 if high  low              Same as low  high2 but avoids overflow for             large low and high            int mid  low  high  low  2             String str1  commonPrefixarr low mid            String str2  commonPrefixarr mid  1 high             return commonPrefixUtilstr1 str2                return null      Driver program to test above function    public static void mainString args         String arr  geeksforgeeks geeks            geek geezer        int n  arrlength         String ans  commonPrefixarr 0 n  1         if anslength  0             SystemoutprintlnThe longest common prefix is                      ans         else             SystemoutprintlnThere is no common prefix             This JAVA code is contributed by 29AjayKumarPython3# A Python3 Program to find the longest common prefix # A Utility Function to find the common# prefix between strings str1 and str2def commonPrefixUtilstr1 str2     result      n1 n2  lenstr1 lenstr2    i j  0 0     while i  n1  1 and j  n2  1             if str1i  str2j            break        result  str1i        i j  i  1 j  1         return result # A Divide and Conquer based function to# find the longest common prefix This is# similar to the merge sort techniquedef commonPrefixarr low high     if low  high        return arrlow     if high  low             # Same as low  high2 but avoids        # overflow for large low and high        mid  low  high  low  2         str1  commonPrefixarr low mid        str2  commonPrefixarr mid  1 high         return commonPrefixUtilstr1 str2 # Driver Codeif __name__  __main__     arr  geeksforgeeks geeks                   geek geezer    n  lenarr    ans  commonPrefixarr 0 n  1     if lenans        printThe longest common prefix is ans    else        printThere is no common prefix # This code is contributed by Rituraj JainC# C# Program to find the longest common prefixusing System class GFG A Utility Function to find the common prefix between strings str1 and str2static string commonPrefixUtilstring str1                               string str2    string result      int n1  str1Length        n2  str2Length     for int i  0 j  0             i  n1  1  j  n2  1             i j            if str1i  str2j            break        result  str1i        return result  A Divide and Conquer based function to find the longest common prefix This is similar to the merge sort techniquestatic string commonPrefixstring arr                           int low int high    if low  high        return arrlow     if high  low             Same as low  high2         but avoids overflow for         large low and high        int mid  low  high  low  2         string str1  commonPrefixarr low mid        string str2  commonPrefixarr mid  1 high         return commonPrefixUtilstr1 str2        return null  Driver Codepublic static void Main    String arr  geeksforgeeks geeks                    geek geezer    int n  arrLength     String ans  commonPrefixarr 0 n  1     if ansLength 0            ConsoleWriteThe longest common                           prefix is   ans        else            ConsoleWriteThere is no common prefix      This code is contributed by 29AjayKumarJavascriptscript  Javascript program to find the longest common prefix  A Utility Function to find the common prefix between strings str1 and str2function commonPrefixUtilstr1 str2    let result      let n1  str1length n2  str2length     forlet i  0 j  0 i  n1  1             j  n2  1 i j            if str1i  str2j                    break                result  str1i        return result  A Divide and Conquer based function to find the longest common prefix This is similar to the merge sort techniquefunction commonPrefixarr low high    if low  high            return arrlow         if high  low                      Same as low  high2 but avoids         overflow for large low and high        let mid  low  Mathfloorhigh  low  2         let str1  commonPrefixarr low mid        let str2  commonPrefixarr mid  1 high         return commonPrefixUtilstr1 str2        return null  Driver codelet arr   geeksforgeeks geeks            geek geezer let n  arrlengthlet ans  commonPrefixarr 0 n  1 if anslength  0    documentwrite        The longest common prefix is   anselse    documentwrite        There is no common prefix  This code is contributed by rag2127 scriptOutputThe longest common prefix is geeTime Complexity Since we are iterating through all the characters of all the strings so we can say that the time complexity is ON M where N  Number of strings
M  Length of the largest string stringAuxiliary Space To store the longest prefix string we are allocating space which is OM Log NThis article is contributed by Rachit Belwariar If you like GeeksforGeeks and would like to contribute you can also write an article and mail your article to reviewteamgeeksforgeeksorg See your article appearing on the GeeksforGeeks main page and help other Geeks RecommendedSolve DSA problems on GfG PracticeSolve Problems"
142687.0,Puzzle 75 | Prisoner’s Hat,,,"Logical Puzzles,Puzzles",0.0,articles/142687.txt,https://www.geeksforgeeks.org/puzzle-75-prisoners-hat/,,A Police officer caught four criminals He plays a game with these four men He lines up three of the prisoners A B C in one room and the fourth prisonerD is placed in a separate roomEach prisoner is given a hat to wear The officer tells them that there are in total two blue hats and two red hats If any of them can guess the color of the hat they are wearing right he promises to set all four of them free They cannot communicate with each other the only information is thatThe prisoner A can see the colors of hats worn by prisoner B and prisoner CPrisoner B can ONLY see the color of hat worn by prisoner CAfter a few minutes of silence one of the prisoner gets the answer right who is itSolution Prisoner B gets the answer rightExplanation Based on the arrangement made by the officer the only thing that prisoner B can see is prisoner C wearing a blue hat Prisoner B has no information about the other two prisoners hat colorsThen he calculatesHe can be wearing either a blue hat or a red hatIf he is wearing a blue hat prisoner A should be seeing a blue hat on him prisoner B and a blue hat on prisoner C and therefore the remaining two are red hats he must have declared his answer way before without any thinking but he is silent This means that he prisoner B is not wearing a blue hat Hence he figures out that he is wearing a red hat This puzzle is contributed by Harika Mulmudi Please write comments if you find anything incorrect or you want to share more information about the topic discussed above
142691.0,Puzzle 74 | Chocolate love,,,"Analytical Mathematical Puzzles,Puzzles",0.0,articles/142691.txt,https://www.geeksforgeeks.org/puzzle-74-chocolate-love/,,Priyanka visited a famous monument called holyghar located near Himalayas It was a round structure consisting of 100 steps in spiral stairway to reach top From top you can have overview of natural beauty surrounding that place Priyanka thought of reaching the top She also carried a lot of chocolates with her for kids In the process of climbing up with each step a chocolate falls from her bag When she reaches top she donates half of the chocolates left with her to small kids Again in the process of climbing down a chocolate falls down with each stepShe repeats the same process at five holyghars and now she is left with no chocolates Can you find out the total number of chocolates she had with her initially Solution 9300 chocolatesExplanation Let us begin from the end We have fifth holyghar to consider firstPriyanka climbed down hundred steps so after donating she must be left with 100 chocolates Now she donates half of total chocolates so before donating she must be having 200 chocolatesNow she loses 100 chocolates while climbing up so in total she must be having 300 chocolates before climbing fifth holygharNow the same procedure is followed for fourth holyghar So before climbing fourth she must be having 3001002100 chocolates which amounts to 900Before climbing third she must be having 9001002100 which amounts to 2100 Now before climbing second she must be having 4500 chocolatesAt last  before climbing first she must be having 9300 chocolates So initially she had in total 9300 chocolatesThis puzzle is contributed by Ankur Chaudhary Please write comments if you find anything incorrect or you want to share more information about the topic discussed above
